Lab 02: File Permissions, Env (Path), & I/O Redirection
=======================================================

Assignment Instruction
----------------------

To successfully complete this assignment, you are advised to pay attention to the following:

1. **Follow instructions:** Read, interpret, and follow instructions very carefully. Finish reading the whole question and note the requirements before you start working on the question.
2. **Use resources:** You may use any resources available to you via the web. You are encouraged to discuss the problems with others before you sit down and attempt to answer the questions.
3. **Work independently:** While you are completing the questions, you are expected to work on your own without direct help from other people (non-human resources such as search engines are still allowed).
4. **Work together:** Come to the office hours to work as a group on the interpretation of and solutions to questions. When using text messaging, attach screenshots.
5. **For introduction to basic Linux and shell commands and special characters, see:**
   
   - For Linux commands, see :ref:`Linux Shell Commands <linux_shell_commands>`
  
   - For special characters, see :ref:`Linux Shell Special Characters <linux_shell_special_characters>`

Getting Started
---------------

1. **Class directory:** To begin this assignment, make sure you navigate into the class directory under your **user home** directory.
2. **scp the tar file:** Use ``scp`` to copy the tar file ``a02.tar.gz`` from ``datacenter@tychen.us`` to your ``~/class`` directory. The command is: ``scp datacenter@tychen.us:~/class/labs/a02.tar.gz .`` (Don’t forget the “ . ” at the end of the command) and the password is **InCharge56!**
3. **Unzip the tar file:** Extract the contents of the tar file: ``tar -xf a02.tar.gz`` Once the files are extracted, you should see the ``a02`` folder (a directory containing several directories and files) in your class directory. These are the files you need to complete this assignment.
4. **a02:** Unless otherwise specified in the question, all file names are given relative to the directory ``~/class/a02``.
5. **Passwords:** All the account names and the corresponding passwords are recorded in Canvas Assignment **a00**, where you keep them updated.

When You Are Done
-----------------

When you have completed the assignment:

1. **done.sh:** Run the script **done.sh** in ``~/class`` as follows:
   ``./done.sh firstname lastname a02`` (The ``done.sh`` script is part of Assignment ``h01``.)
2. **lab02.txt:** The **done.sh** script will check your answers and create a new .txt called ``lab02.txt`` in the ``a02`` directory that you will need to submit to Canvas for assignment ``a02``.
3. **Download lab02.txt to submit to Canvas:** From your local computer terminal (cmd or PowerShell for Windows and Terminal for macOS), change into a folder (e.g., ``cd Documents`` to go into your Documents folder). Use the **scp** command to copy your submission file from your VM to your local computer's Documents folder:
   ``scp YOUR_USERNAME@YOUR_VM_IP_ADDRESS:~/class/a02/lab02.txt .``

**Note:**

- You can run the ``done.sh`` script at any point when you are working on the assignment, and the content of the generated ``lab02.txt`` may be helpful in addition to the check scripts in each question.
- However, you must run it just prior to submitting the generated ``lab02.txt`` file in your ``class/a02`` directory to Canvas to make sure you are submitting the most recent file.
- To see your VM's IP address, run ``ip addr`` or ``ifconfig`` (installation of net-tools required).

Part 0: Introduction
--------------------

This lab activity continues with Linux and introduces you to Linux scripts including basics of the bash shell, the Linux environment, and shell scripting:

- Basic Linux commands
- Linux OS file permissions
- Running user-developed scripts
- Configure your own Linux shell environment
- Writing your first Linux shell script

Unix was developed to be a very portable and flexible operating system that enabled users to customize operating systems for any computer and then customize it for the tasks at hand. As a result, many people did just that. One of the outcomes of that effort is that many people developed different operating system features that customize a user’s environment known as shells. We will examine one of those shells, the bash shell (`Bourne Again shell <https://www.gnu.org/software/bash/>`_ by Brian Fox in 1989), which is a rework of the original Bourne shell (`sh <https://en.wikipedia.org/wiki/Bourne_shell>`_ by Stephen Bourne at Bell Labs in 1979).


Part 1: Managing Linux File Permissions
---------------------------------------

Let us start learning a little about Unix file permission/access modes by running the script called ``solution.pl`` in ``a02/q01``. Please do the following to observe the results:

- **First, let us use** ``cat`` **to take a look at the three special text files** (``fsu.txt``, ``hello.txt``, and ``quick.txt``):

  .. code-block:: bash

    chen_user@localhost:~/class/a02/q01$ cat hello.txt 
    HW ECEJRV LB ER LXHAOA TP XHTIQP XRTCQF TQOK HD LIEGLG RGEO EI HP
    chen_user@localhost:~/class/a02/q01$

- The files are somehow encrypted, and we are told that we can use the Perl script ``solution.pl`` (a script written in Perl language) to decipher these files. By using the dot-slash (``./``) notation (the dot is the current directory and the slash is a path delimiter, meaning to run a script in the current directory), we type ``./solution.pl hello`` in the command line, followed by an enter to run the script.

- You may get an error like:

  .. code-block:: bash

    chen_user@vma45:~/class/a02/q01$ ./solution.pl hello
    -bash: ./solution.pl: Permission denied
    chen_user@vma45:~/class/a02/q01$

  Now that we are denied permission to execute the file, let us take a closer look at the file. To see the content of the file, we can ``cat`` the file, ``view`` (this should give you ``vim``, type ``:q`` and then enter to exit the program) the file, use ``head`` (first 10 lines) or ``tail`` (last 10 lines) to peek at parts of the file, or even use ``nano`` to open the file to verify that it involves some actions more than a static text file. The reason we are denied running it, however, is that we don't have proper permissions as the error message says.

Know Unix File Permissions
--------------------------

We always issue command ``ls`` to learn about the files (files, directories, and links) inside a directory. When we need more information about the files, we can use options to modify the behavior of the ``ls`` command. We often use ``ls`` with the long format option ``ls -l`` or simply ``ll`` (== ``ls -alF``) for this purpose. Let us try this out:

.. code-block:: bash

  chen_user@vma50:~/class/a02/q01$ ll
  total 56     (### directory size in kilobytes)
  drwxrwxr-x 2 chen_user  chen_user 4096 Jan 13 22:28 ./
  drwxrwxr-x 6 chen_user  chen_user 4096 Sep 23 18:19 ../
  -r--r--r-- 1 chen_user  chen_user  304 Aug 21  2017 a01.bak
  -rw-rw-r-- 1 chen_user  chen_user  312 Sep  9 15:21 a01.txt
  -rwxrwxr-x 1 chen_user  chen_user 2536 Aug 21  2017 check01.sh*
  -rwxrwxr-x 1 chen_user  chen_user  121 Aug 21  2017 clean01.sh*
  -rw-rw-r-- 1 chen_user  chen_user 1120 Aug 21  2017 decode.sh
  -rw-r--r-- 1 chen_user  chen_user 2420 Aug 21  2017 fsu.txt
  -rw-r--r-- 1 chen_user  chen_user   66 Aug 21  2017 hello.txt
  -rw-r--r-- 1 chen_user  chen_user  283 Aug 21  2017 quick.txt
  -rw-rw-r-- 1 chen_user  chen_user 1490 Aug 21  2017 solution.pl

  1222333444?5 6666666666 777777777 8888 999999 99999 00000000000 
  fppppppppp?l uuuuuuuuuu ggggggggg ssss dddddd tyyyy nnnnnnnnnnn 

Seeing the results above, you could probably decipher most of the 10 fields, but the ones before the first space (?) are called "file mode string" or "mode bits," and they define the file permissions. A simple `explanation <https://www.garron.me/en/go2linux/ls-file-permissions.html>`_ of the mode bits is ?UUUGGGOOO below.

The first character in the file mode string denotes the `file type <https://en.wikipedia.org/wiki/Unix_file_types>`_: ``d`` (directory), ``l`` (link), or ``-`` (file). The ``UUUGGGOOO`` (User, Group, Other) bits follow the file type to define the permissions given to the three types of users, each with Read, Write, and eXecute (or search for directories) permission.

A file mode string with full Read, Write, and eXecute permissions will therefore be ``-rwxrwxrwx``. When a permission bit is not given, a dash ``-`` will be in place.

For a simple explanation of the mode bits, see this explanation below.

.. code-block:: bash

  -rwxrw-r--    10    root   root 2048    Jan 13 07:11 afile.exe
  ?UUUGGGOOOS   00  UUUUUU GGGGGG ####    ^-- date stamp and file name are obvious ;-)
  ^ ^  ^  ^ ^    ^      ^      ^    ^
  | |  |  | |    |      |      |    \--- file size
  | |  |  | |    |      |      \-------- group name (e.g., Users, Administrators, etc)
  | |  |  | |    \--------------- owner account
  | |  |  | |    \---------------------- link count (what constitutes a "link" here varies)
  | |  |  | \--------------------------- alternative access (blank means none defined)
  | \--\--\----------------------------- Read, Write and Execute/Search access modes
  \------------------------------------- file type flag (-, file; d, directory; l, link)

Now let us take a closer look at our permission problem. We will use ``ls -l`` to see the permission information we need:

.. code-block:: bash

  chen_user@vma50:~/class/a02/q01$ ls -l solution.pl 
  -rw-rw-r-- 1 chen_user chen_user 1490 Aug 21  2017 solution.pl
  chen_user@vma50:~/class/a02/q01$  

In our case of ``ls -l solution.pl``, the file mode string is read like the following table. Note that the permissions are usually shown in numeric notations: read (4), write (2), and execute (1) and we add the three bits up for each user type to numerically represent the permissions of the user type on the file.

.. list-table::
   :header-rows: 1

   * - file owner
     - group owner
     - others
   * - rw-
     - rw-
     - r--
   * - read, write
     - read, write
     - read
   * - 6 (4+2+0)
     - 6 (4+2+0)
     - 4 (4+0+0)

As you can see, there is ``no eXecution bit defined for all three user types``. No wonder we are not able to execute the script. We are permitted to read and write only.

Modify File Permissions
------------------------

If you mess up the permissions, you can run the script ``clean01.sh`` by typing ``./clean01.sh`` to remove the execute permission of ``solution.pl`` and ``decode.sh``.

We don't like getting denied, so now we want to gain execute permission to the file. We do so by changing the file mode string and the command is, as you have guessed: ``chmod`` (change mode). The syntax of ``chmod`` command is: ``chmod [options] permissions file_name`` and can be issued using both symbolic or numeric notations. For example, in your company, you are working on a file and you want to set the permission as such:

- the user can read, write, and execute it;
- members of your group can read and execute it; and
- others may only read it.

Using the symbolic notation, you would issue the command as:

.. code-block:: bash

  chmod u=rwx,g=rx,o=r myfile 

or, in numeric form:

.. code-block:: bash

  chmod 754 myfile

Now you know why people say numbers such as 777, 660, 640 when they talk about access policy.

**Note:** 
            
  - Managing permissions is a serious issue and you want to be very careful by having a clearly stated access policy and always documenting each step as you modify them (especially, e.g., with something like the ``-R`` recursive option). For example, you may issue ``chmod go-rw foo.txt`` and just strip the read and write permission for both the file owner group and all others (because we used the ``-`` option rather than ``+``).

  - For a simpler scenario like this assignment, we could simply issue a command like ``chmod +x script.sh`` to grant execute permission to all user groups.

We may now perform the following actions to the script file ``solution.pl``:

1. Use ``ls -l`` **to view the permissions for the file.

  .. code-block:: bash

    -rw-r--r-- 1 chen_user chen_user   66 Dec 19  2019 hello.txt
    -rw-r--r-- 1 chen_user chen_user  283 Dec 19  2019 quick.txt
    -rw-rw-r-- 1 chen_user chen_user 1490 Dec 19  2019 solution.pl

2. Use ``chmod`` command to grant execute permission to all user groups.

3. Use ``ls -l`` to view the permissions for the file again to make sure the `x` bits are present.

4. After you are confident that the file permission has been modified the way you want, try the command ``./solution.pl hello``. It should work and give you the result like this:

  .. code-block:: bash

    chen_user@vma50:~/class/a02/q01$ ./solution.pl hello

    HELLO THERE
    chen_user@vma50:~/class/a02/q01$ 

5. Run ``solution.pl`` with ``quick`` as argument and observe the result.

6. Run ``solution.pl`` with ``fsu`` as argument and observe the result.

7. Now, let's grant execute permission to the file ``decode.sh``:

   - Use ``chmod +x`` to make ``decode.sh`` executable.
   - Run the command ``./decode.sh``. You will see the result as:

  .. code-block:: bash

    chen_user@vma50:~/class/a02/q01$ ./decode.sh 
    File 1: encoded file: hello.txt
    File 2: encoded file: quick.txt
    File 3: encoded file: fsu.txt
    See the file results.txt for results
    chen_user@vma50:~/class/a02/q01$ 

The file ``results.txt`` will be automatically created as an output file of running ``decode.sh``.

8. Finally, run ``check01.sh`` and ensure you receive the OK's.

Now that you have practiced modifying file permissions in Linux, answer the following questions to assess your understanding of this important topic.

``nano a01.txt`` to answer the following questions for Part 1.

+------------------------------------------------------------+-----------------------------+
|   A. Enter DONE on this line when you are done with this   ||                            |
|   part of the lab.                                         ||                            |
+------------------------------------------------------------+-----------------------------+
||  B. Which of the commands on the right (1-5) will list    || 1. ``./decode.sh``         |
||  the permissions of the file decode.sh?                   || 2. ``chmod +x decode.sh``  |
+------------------------------------------------------------|| 3. ``ls –l decode.sh``     |
||  C. Which of the commands on the right (1-5) will add     || 4. ``chmod o-w decode.sh`` |
||   executable permission to decode.sh?                     || 5. ``chmod o+w decode.sh`` |
+------------------------------------------------------------||                            |
||   D. Which of the commands on the right (1-5) will run    ||                            |
||   the program decode.sh?                                  ||                            |
+------------------------------------------------------------||                            |
||   E. Which command on the right (1-5) will add write**    ||                            |
||   privileges for others for decode.sh?                    ||                            |
+------------------------------------------------------------+-----------------------------+

Note
----

We will learn about **Linux file permissions** and how to change the permissions by modifying the file mode string of a file.

Part 2: Customizing Linux Shell: PATH
-------------------------------------

$PATH and bin directories
~~~~~~~~~~~~~~~~~~~~~~~~~

Unix was created to allow users to modify and customize the operating system. We will learn how to customize our system by:

- Creating a user `bin` directory to place our own executable files.
- Updating the `$PATH` environment variable to enable running the executables in the new bin directory everywhere in the system.

Use the directory `~/class/a02/q02` to complete this part of the lab and to record your answers for this part of the assignment.

For security reasons, after we modify (`chmod`) the permission mode of a text file to become executable, we need to run the executable script like `./script.sh` (with the dot slash before the script) because the script can only be run in its present directory but not from other directories in the system. This is a good security practice, but we can imagine that we may write some executables that we want to run when we are in different paths/directories in the system (or even run by different users). We can either:

- Create a soft link (`ln -s filename linkname`) (similar to a shortcut in Windows or Make Alias in macOS) to the file wherever we want to run it, or
- Place the file in a directory (such as bin) that contains compiled binary files and executable scripts to be run from different directory locations in the system.

The dot (`.`) in `./script_name.sh` we place in front of the script is needed because the executable is not a built-in command (either shell built-in or system utility) and can only be run in the present directory with dot-slash or source (`.`). To run an executable globally in the environment, when an executable is run, Unix will check if the directory containing the executable file is specified in the **PATH environment variable**. If it is, then the executable will be executed directly. Otherwise, it can only be run locally in the present working directory using dot slash. So, if we created some executable scripts that we want to run across the system, we can either:

- Place them into one of the directories in the `$PATH` environment variable, or
- Add the containing directory into the `$PATH` variable.

If you print the PATH variable (`echo $PATH`) now, you will see the directories in the **PATH** variable like this (the colons `:` are separators):

.. code-block:: bash

   chen_user@vma50:~$ echo $PATH
   /home/chen_user/bin:/home/chen_user/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
   chen_user@vma50:~$ 

As you can see, there are several `bin` directories (bin stands for binary; meaning compiled executable files). Now we know that the `./` in front of the script is used to instruct the operating system that we do want to run this executable in the present working directory, which is not in `$PATH`. (Alternatively, you can run an executable using `source` or `dot` with a full path specified.)

Let us create a user bin and place the executable **decode.sh** into it, then update **$PATH** to include the user bin directory:

- Navigate to your user home directory;
- Create the `/home/username/bin`, or `~/bin`, directory.
- `cp decode.sh` from `q01/` to your `~/bin` directory.

Update the PATH Environment Variable
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We use the `export` command to mark environment variables to be **exported** to all processes started from the current shell session so they can be accessed by the subshells. Now we can update your `PATH` environment variable to include `~/bin` as follows.

.. code-block:: bash

   export PATH=$PATH:~/bin 

Change back to your `a02/q02` directory and make sure you can run **decode.sh** without the `./`.

Check Your Work
~~~~~~~~~~~~~~~

- Navigate to your `class/a02/q02` directory.
- Edit the file `a02.txt` using the command `nano a02.txt`.
- Use the arrow keys to move the cursor to the line starting with “A.”
- Enter the word “DONE” on the line starting with “A.”
- Save the file (using ^-X).
- Run the script `check02.sh` (run as `./check02.sh`) to check your answer.

Part 3: Running Shell Scripts
-----------------------------

Running Shell Scripts
~~~~~~~~~~~~~~~~~~~~~

We have learned about command output redirection in Lab 1 to redirect text streams to create/overwrite, append, and merge text files. Instead of issuing the command directly in the shell/CLI, let us write a **shell script** to do the job.

- You will find that shell scripting uses commands just like issuing commands in the command line (CLI).

hello, world
~~~~~~~~~~~~

As a convention, the first program to write would output the string "Hello, World!" We will learn how to print "hello, world" to the terminal by creating a script, change its permission mode, and execute the file to print (`echo`) "hello, world."

Some say the level of difficulty of a computer language can be measured by how many lines of code are needed to print the sentence `Hello, World! <https://en.wikipedia.org/wiki/%22Hello,_World!%22_program>`_ to the screen.

A. Recall Java
~~~~~~~~~~~~~~

Let us start with something we already know something about. Many of you have learned Java or a similar language. In Java, we would write the following code in a text editor or IDE (integrated development environment) as **HelloWorld.java**:

.. code-block:: java

   public class HelloWorld {
       public static void main(String[] args) {
           System.out.println("Hello, World");
       }
   }  

After we have the raw source code, we use the compiler `javac` (part of JDK, Java Development Kit) to compile the source code (`javac HelloWorld.java`) into bytecode file **HelloWorld.class** and run it using `java HelloWorld`. If you use an IDE, the compiling and running are usually done as part of the IDE interface.

B. Hello World in bash
~~~~~~~~~~~~~~~~~~~~~~

In Bash and other shell languages, programmers take advantage of the existing tools (commands and utilities) in the OS. Actually, the term "shell" began as a name for a "command processor" and a shell is both an interface to the OS (a CLI as opposed to GUI) and a command language interpreter that helps us run scripts. To print "hello, world", we can simply do:

.. code-block:: bash

   chen_user@vma50:~$ echo "hello, world"
   hello, world
   chen_user@vma50:~$ 

Sometimes we feel more comfortable to code such functionality into a file so we can use the program repeatedly. We can use a text editor for this purpose by running:

.. code-block:: bash

   chen_user@vma50:~$ nano hello_world

to open nano and insert the same command inside the text document:

.. code-block:: bash

   echo "hello, world"

Save the plain text file, make it executable (`chmod +x`: change mode add eXecute) and run it using the dot slash notation:

.. code-block:: bash

   chen_user@vma50:~$ chmod +x hello_world 
   chen_user@vma50:~$ ./hello_world 
   hello, world
   chen_user@vma50:~$

Running Scripts (Redirecting Text Stream)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We want to:

- Observe a script to learn how a script can look like, and
- Run some user-created scripts to generate text streams and redirect the data to files, which we practiced a little in Lab 01 (`a01`) already. As opposed to running Unix utilities or Bash commands one by one in the command line, scripts can contain multiple commands in a sequence.

Use the directory `~/class/a02/q03` to complete this part of the lab and to record your answers for this part of the assignment.

Observe simple.sh
~~~~~~~~~~~~~~~~~

Here we want to run the script `simple.sh` and redirect the output to `simple.txt`, but let us take a peek inside the script:

.. code-block:: bash

   chen_user@vma50:~/class/a02/q03$ cat simple.sh 
   #!/bin/bash
   #
   #  Script used to print information about this computer
   #
   echo "STARTING $0"
   echo "Script    : $0"
   echo "User      : $USER"
   echo "Home      : $HOME"
   echo "Directory : `pwd`"
   echo "Date      : `date`"
   echo "==========================================="
   echo
   echo "Users currently logged are : " 
   w | cut -d " " -f 1 - | grep -v USER | sort -u
   echo
   echo "This is `uname -s` running on a `uname -m` processor."
   echo
   echo "The system has been up for this long :`uptime`"
   echo
   echo "There are `ps -a | wc -l` processes running"
   echo
   echo "==========================================="
   echo
   echo "ENDING $0"

   chen_user@vma50:~/class/a02/q03$

We see that there are a lot of `echo` commands in this script and it looks quite "flat" compared to, e.g., Java source code. Some of the obvious elements:

- `#!/bin/bash`: The first line includes:
  - the shebang (`#!`) to instruct the OS that this text file is actually a script, and
  - the interpreter directive (`/bin/bash`) to point to the interpreter to be used for this script. In this case, we use bash as our interpreter, which is located in `/bin` directory for binary files:

.. code-block:: bash

   chen_user@vma50:/bin$ ls -l bash
   -rwxr-xr-x 1 root root 1037528 May 16  2017 bash
   chen_user@vma50:/bin$  

- `#`: The number sign `#` is a single line comment symbol. There is no multi-line comment in bash. The comment symbol and all the following characters in the same line are ignored by the interpreter.
- `echo`: The `echo` command displays text by printing the text to terminal (standard output, STDOUT). Note that double quotes `" "` are used around text string.
- `w`: The `w` command shows what users are logged in.
- `$`: A dollar sign `$` before a character string is a prefix for accessing the variable. A variable can be assigned a value. In other words, a variable is a pointer to a value. In shell scripting, we may create our own variables in the script or use existing environment variables and shell variables.

Run simple.sh
~~~~~~~~~~~~~

We want to run `simple.sh` and redirect the results to a text file `simple.txt`.

1. Run `./simple.sh` to observe the output of the file in the shell.
2. Run `./simple.sh > simple.txt` to redirect the output to `simple.txt` instead of STDOUT.
3. Use `ls -l` to make sure `simple.txt` is created and the timestamp is current.

.. code-block:: bash

   -rw-rw-r-- 1 chen_user chen_user  514 Jan 16 19:11 simple.txt

Run pinger.sh
~~~~~~~~~~~~~

Using the script `pinger.sh`, we want to find active computers on your network using the `ping` command. Let us do the following:

4. Run the script `pinger.sh` without data redirection to observe how this script scans the range of hosts and outputs to the terminal. If you have access to a range of computers in your network, you should see something like this:

.. code-block:: bash

   ...
   Use ping to check connection with vma15.cci.local
   PING vma15.cci.local (192.168.60.25) 56(84) bytes of data.
   64 bytes from vma15.cci.local (192.168.60.25): icmp_seq=1 ttl=64 time=5.52 ms
   64 bytes from vma15.cci.local (192.168.60.25): icmp_seq=2 ttl=64 time=2.65 ms
   ...

In addition to output to the STDOUT (standard output, the terminal), `pinger.sh` also generates a file called `whoami.txt` by echoing a bunch of information to an output file (line #5 of `pinger.sh`) called `whoami.txt`. Use `ls -l` to check the timestamp to make sure the file is current and use `cat` to view the content of the file.

Examining the script `pinger.sh` will show you how the file `whoami.txt` is created. You will see:

- a lot of `echo` commands,
- some variable assignments such as `output="whoami.txt"`,
- a `for` loop,
- several appended output redirections `>> $output` (this is how we create `whoami.txt`).

Remove `whoami.txt` to make sure that `pinger.sh` will create two text files at the same time in the next step. (Note that because we use the overwrite redirection operator `>` before the appended redirection operators `>>`, no matter how many times we run `pinger.sh`, we will have a fresh copy of `whoami.txt` because each time we run `pinger.sh`, `whoami.txt` is overwritten.)

Finally, run `pinger.sh > pinger.txt`. This time, you should not see the output to the terminal. This process will take a few seconds.

Check Your Work
~~~~~~~~~~~~~~~

If it is not tested, it doesn’t work. Make sure you have actually created two output files: `pinger.txt` and `whoami.txt`. Use `ls -lt` to find out.

Use `cat` to merge these two files (`pinger.txt` and `whoami.txt`) into a single file, which we will call `complete.txt`.

Shell Scripting
~~~~~~~~~~~~~~~

Shell languages, including Bash, are referred to as both the command line interface (CLI, the interface) and the command language (including the instruction set and an interpreter to run your scripts). Shell languages are command languages because they take advantage of the commands shipped with the OS. In addition, shells often have `built-in commands <https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html>`_ to extend the functionality of the OS.

Here we are creating our first script after the "hello, world." In the directory `q03`, using the text editor `nano`, create a script called `q03.sh` (don't forget to `chmod +x`) that would:

- Create the above three output files (`simple.txt`, `whoami.txt`, and `pinger.txt`), and then
- Merge the three files into a single file called `q03.txt`.

**Hint:** Generate the files first, then use the `cat` command to merge the files. You can do this step by step by concatenating two files twice or just `cat` all three files at once.

Check Your Work
~~~~~~~~~~~~~~~

1. Change to your `class/a01/q03` directory.
2. Edit the file `a03.txt` using the command `nano a03.txt`.
3. Use the arrow keys to move the cursor to the line starting with “A.”
4. Enter the word “DONE” on the line starting with “A.”
5. Save the file (using `Ctrl-X`).
6. Run the script `check03.sh` (using `./check03.sh`) to check your answer.

Turing Completeness
~~~~~~~~~~~~~~~~~~~

In case you are wondering what really is a "programming language," a good criterion for making the judgment is `Turing completeness <https://en.wikipedia.org/wiki/Turing_completeness>`_. After all, a programming language is an instruction set (vocabulary) with syntax and semantics (rules), along with a type system and a runtime (plus standard library) in order to "compute." This criterion uses the "function" (Turing completeness means being able to solve all computable problems) of a language to decide whether an artificial computer language is a "programming language." Markup languages such as HTML and XML and style sheet languages such as CSS are therefore generally not considered as "programming languages" because they are designed to describe presentation rather than function (although some would `disagree <https://softwareengineering.stackexchange.com/questions/129141/is-css-a-programming-language>`_). In this sense, SQL (Structured Query Language) is also `not <http://progopedia.com/language/sql/>`_ a programming language because it does data management but does not meet the criterion of Turing completeness.

Built-in vs Utility
~~~~~~~~~~~~~~~~~~~

An interesting and subtle distinction exists between the shell built-in commands and the commands shipped with the Unix-like OS: "A `built-in command <https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html>`_ is part of the shell itself. A utility is an executable program that is installed (usually in a system directory such as `/bin`) which the shell executes."
