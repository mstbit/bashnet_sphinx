Lab 01: User Accounts, Web Content, & Text Stream
=================================================

Assignment Instruction
----------------------

To successfully complete this assignment, you are advised to pay attention to the following:

1. **Follow instructions:** Read, interpret, and follow instructions very carefully. Finish reading the whole question and note the requirements before you start working on the question.
2. **Use resources:** You may use any resources available to you via the web. You are encouraged to discuss the problems with others before you sit down and attempt to answer the questions.
3. **Work independently:** While you are completing the questions, you are expected to work on your own without direct help from other people (non-human resources such as search engines are still allowed).
4. **Work together:** Come to the office hours to work as a group on the interpretation of and solutions to questions. When using text messaging, attach screenshots.
5. **For introduction to basic Linux and shell commands and special characters, see:**
   - `Linux & shell basic commands <https://bashnet.org/docs/linux_shell_commands.php>`_
   - `Linux & shell special characters <https://bashnet.org/docs/linux_special_characters.php>`_

Getting Started
---------------

1. **Class directory:** To begin this assignment, make sure you navigate into the class directory under your user home directory.
2. **scp the tar file:** Use ``scp`` to copy the tar file ``a01.tar.gz`` from ``datacenter@tychen.us`` to your ``~/class`` directory. The command is: ``scp datacenter@tychen.us:~/class/labs/a01.tar.gz .`` 
   (### don’t forget the “ . ” at the end of the command) and the password is ``InCharge56!``
3. **Unzip the tar file:** Extract the contents of the tar file: ``tar -xf a01.tar.gz``. Once the files are extracted, you should see the ``a01`` folder (a directory containing several directories and files) in your class directory. These are the files you need to complete this assignment.
4. **a01:** Unless otherwise specified in the question, all file names are given relative to the directory ``~/class/a01``.
5. **Passwords:** All the account names and the corresponding passwords are recorded in Canvas Assignment ``a00``, where you keep them updated.

When You Are Done
-----------------

When you have completed the assignment:

1. **done.sh:** Run the script ``done.sh`` in ``~/class`` as follows: ``./done.sh firstname lastname a01`` (The ``done.sh`` script is part of Assignment ``h01``.)
2. **lab01.txt:** The ``done.sh`` script will check your answers and create a new .txt file called ``lab01.txt`` in the ``a01`` directory that you will need to submit to Canvas for assignment ``a01``.
3. **Download lab01.txt to submit to Canvas:** From your local computer terminal (cmd or PowerShell for Windows and Terminal for macOS), change into a folder (e.g., ``cd Documents`` to go into your Documents folder). Use the ``scp`` command to copy your submission file from your VM to your local computer's Documents folder:
   ``scp YOUR_USERNAME@YOUR_VM_IP_ADDRESS:~/class/a01/lab01.txt .``

**Note:**

- You can run the ``done.sh`` script at any point when you are working on the assignment and the content of the generated ``lab01.txt`` may be helpful in addition to the check scripts in each question.
- However, you must run it just prior to submitting the generated ``lab01.txt`` file in your ``class/a01`` directory to Canvas to make sure you are submitting the most recent file.
- To see your VM's IP address, run ``ip addr`` or ``ifconfig`` (installation of net-tools required).

Part 0: Introduction
--------------------

This lab introduces you to the following Linux operations:

1. Creating the user accounts you will use later on and record their passwords in a secure location (assignment `a00` on Canvas).
2. Creating the directories and directory structure needed for this class.
3. Configuring your web server to test and expand the website using content from another computer.
4. Creating and redirecting text streams.
5. Manipulating text streams using output redirection operators.

We need access to a virtual machine (VM) to work on these operations. To subscribe, configure, and connect to a VM, please refer to the documents in **Week 0** of this course. Specifically, you should:

1. Complete the :ref:`subscribe_to_vps_plan`.
2. Follow the instructions in :ref:`configure_vm_firewall`.
3. Obtain your IP Address and root Password as explained in :ref:`obtain_ip_address_root_password`.
4. Connect to your VM by following the steps provided in :ref:`connect_to_vm`.

These documents are located in the **Week 0** folder.


We also need to install the LAMP (Linux, Apache, MySQL, and PHP) technology stack in our VM for use later. To do that, we need to issue the following commands as an administrator (admin/sudoer):

.. code-block:: bash

    sudo apt update          # always update first when "apt install"
    sudo apt install apache2 # sudo systemctl status apache2 to check if the service is active
    sudo apt install mysql-server # sudo systemctl status mysql to check if the service is active
    sudo apt install php libapache2-mod-php

Note that you are responsible for managing the virtual machine (VM) that will be used to complete your work. That includes user accounts, applications, and services such as the web server and database systems.

The first challenge for using Linux and other Unix-like systems is the use of a terminal to connect to your VM to handle the server computer operations. It adds a level of complexity as in contrast to using your local computing device but it is an industry common practice that you would want to get used to as soon as possible.

At first, remote into a VM using a terminal (command line interface, CLI) instead of graphic user interface (GUI) applications may seem intimidating. But you will become comfortable with the terminal in no time when you observe the simple patterns of how the commands work and realize there are only a small number of commands to use.

So, follow instructions carefully, document the changes you make, Google a lot, and learn from your mistakes. You will also feel at ease knowing that almost all the mistakes you can make will not damage the server system, not even the legendary ``rm -rf /``.

Part 1. Managing User Accounts & Directories
--------------------------------------------

Introduction
~~~~~~~~~~~~

Using a command line text-based interface (CLI shell, such as Terminal.app for macOS, and cmd.exe or PowerShell for Windows), we will log into a Linux computer remotely. We will then use the default Bash shell interface to create two user accounts: a regular user account and an administrator account. A Linux administrator account is commonly referred as a sudo (super user do) user or "sudoer" because it can run commands with root privileges.

Using the non-administrator user account we created, we will create several directories and files. In addition, we will learn how to copy files from a remote host computer over the network to a designated location, and then decompress the copied archive file to acquire directories and files needed to complete this assignment. The same process will be used in every other assignment.

1.1 Access Your VM
~~~~~~~~~~~~~~~~~~

Log into your virtual machine (VM) using the "root" user account (do not change its password).

Log into your VM as "root":
Following the Connect to VM instruction provided to log in as the "root" user with your password. When logging in, since this is the first time you access this VM from your local computer, you will be promoted to save a security fingerprint. Type "yes" to agree and continue to provide the root user password, and you will be logged in as the root user:

.. code-block:: none

    tychen@mac:~$ ssh chen_user@74.208.29.196          ### logging in from my MacBook terminal using ssh
    The authenticity of host '74.208.29.196 (74.208.29.196)' can't be established.
    ED25519 key fingerprint is SHA256:MALLUpcHilPxoPcvxdR9YOOSbBCTYoAeXJOjoOy9OgQ.
    This key is not known by any other names
    Are you sure you want to continue connecting (yes/no/[fingerprint])?
    Warning: Permanently added '74.208.29.196' (ED25519) to the list of known hosts.
    (chen_user@74.208.29.196) Password: 
    Last login: Sun Jan 28 04:18:24 2024 from 149.76.211.60
    chen_user@localhost:~$

Congratulations! Now you are logged into your VM. You are ready to operate this server computer remotely.

1.2 Create Accounts
~~~~~~~~~~~~~~~~~~~

Use the root user account to create two accounts, one regular user account and one superuser (administrator) account.

The root superuser account (equivalent to Administrators group in Windows) is by default locked and cannot be used to login in Linux distributions such as Ubuntu. To exercise the root user privileges without the root password, we use sudo.

The command sudo needs to precede the command the sudoer wants to execute, e.g., ``sudo adduser new_user_name``. In other words, to perform critical system operations (such as creating a user account), you will need to 1) log in as a sudoer to use the special administrator privileges, and 2) issue the command with the command ``sudo`` in its front to tell the system you would like to run the command with system administrator privileges. (Yes, this is a security measure.)

The first time you run ``sudo``, you will be asked to provide the password for the sudoer account. The sudo session will last for 15 minutes by default, in which period you don't have to type in ``"sudo"`` before commands again to run system-critical commands.

Create regular user account:
Now you will create one regular user account (non-sudoer) for yourself. The command ``adduser`` has syntax like ``sudo adduser username`` with many options.

.. code-block:: bash

    adduser [--system] [--home DIR] [--shell SHELL] [--no-create-home] [--uid ID]
            [--firstuid ID] [--lastuid ID] [--ingroup GROUP | --gid ID]
            [--disabled-password] [--disabled-login] [--gecos GECOS]
            [--add_extra_groups] [--encrypt-home] [--quiet] [--debug]
            [--force-badname] [--help|-h] [--version] [--conf FILE]  user

Here we don't use any options since we are simply creating a regular user account (note that a group with same name as the user account will be automatically created): ``sudo adduser username``. You then will follow the prompts to give the UNIX account a password and identifiable information. Alternatively, you may just enter 6 times to complete the process without entering any personal information. As an example, we are using the root sudoer account to create a regular user account called "test_user":

.. code-block:: bash

    root@vma50:~$ sudo adduser test_user
    [sudo] password for root:
    Adding user `test_user' ...
    Adding new group `test_user' (1006) ...
    Adding new user `test_user' (1006) with group `test_user' ...
    Creating home directory `/home/test_user' ...
    Copying files from `/etc/skel' ...
    Enter new UNIX password:
    Retype new UNIX password:
    passwd: password updated successfully
    Changing the user information for test_user
    Enter the new value, or press ENTER for the default
            Full Name []: John Thrasher
            Room Number []: LSB 008
            Work Phone []: 202-456-1111
            Home Phone []: 850-644-1085
            Other []: What?????
    Is the information correct? [Y/n] y
    root@vma50:~$

Task List
~~~~~~~~~

- Log in as "root" to create a **regular** user account for your daily use. This user will NOT be a superuser or sudoer.
- Log out of the root user account and log back in with the newly created regular user account to verify the account information is correct.
- **Record** the account information in your a00.

Create your superuser account
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create an administrator account by first creating a regular user account, then add the account into the system's sudo group for administrative privileges. Adding a regular user account to the sudo group makes the user a sudoer. We use the command ``adduser`` with the syntax ``sudo adduser username groupname``. As demonstrated below, the created regular user "test_admin" is added to the sudo group to make it a sudoer:

.. code-block:: bash

    root@vma50:~$ sudo adduser test_admin sudo
    [sudo] password for root:
    Adding user `test_admin' to group `sudo' ...
    Adding user test_admin to group sudo
    Done.
    administrator@vma50:~$

Following the examples, now let us create your sudoer account:

- Create a regular user account ready for admin (it is suggested to have the string "admin" as part of the account name such as lastname_admin).
- Add this account into the sudo group.
- Record the account information in a00.

Check and record your work
~~~~~~~~~~~~~~~~~~~~~~~~~~

By the time you are done, you should have the following accounts:

- The original "root" account with a unique password
- One regular user account
- One administrator (sudoer) account

This information of your VM should be stored on the Canvas course website under the assignment a00. You should record and update your own accounts and passwords. That will give you a secure backup to keep track of all of your virtual machine account information.

Note:
~~~~

If you need to change the password of a user, you need to log in as a sudoer (admin) and use the ``passwd`` command; for example:

.. code-block:: bash

    chen_adm@vma50:~$ sudo passwd chen_user
    [sudo] password for chen_adm:
    Enter new UNIX password:
    Retype new UNIX password:
    passwd: password updated successfully

If you are logged in as a regular user and need to use the sudoer privileges, you may switch to a sudoer by using the ``su`` (switch user) command:

.. code-block:: bash

    chen_user@localhost:~$ su chen_admin
    Password: 
    chen_admin@localhost:/home/chen_user$      (# note that you stay in the same directory with the prompt reflecting the new user)

1.3 Create And Remove Directories
---------------------------------

Create And Remove Directories
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create two sets of directories.

When you log into a Linux system, you are in the **user home** directory (``~``), which is where we want to create our directories.

We will use the ``mkdir`` (make directory) command to create the directories/folders. The syntax of ``mkdir`` is:

.. code-block:: bash

    mkdir directory_name  (# create a single directory)

or

.. code-block:: bash

    mkdir directory1 directory2 directory3... (# create multiple directories; note the space between the directory names)

As an example, let us create three directories ``dir1``, ``dir2``, and ``dir3``:

.. code-block:: bash

    chen_user@vma50:~$ ls
    chen_user@vma50:~$ mkdir dir1 dir2 dir3
    chen_user@vma50:~$ ls
    dir1  dir2  dir3
    chen_user@vma50:~$

Now, let us remove the directories:

.. code-block:: bash

    chen_user@vma50:~$ rmdir dir1 dir2 dir3
    chen_user@vma50:~$ ls
    chen_user@vma50:~$

Please follow the steps below to complete this task:

- Make sure you are logged in your VM with your **non-admin** user account ("lastname_user").
- Within your user home directory (issue ``cd ~`` if you are somewhere else), create two directories: ``class``, and ``tests``.
- Move into the ``~/class`` directory (``cd ~/class``), create the following directories: ``a01``, ``a02``, ``a03``, ``a04``, ``a05``, ``a06``, and ``a07``.

1.4 Remotely Copy And Then Decompress File
------------------------------------------

We will remotely copy the compressed tar.gz assignment file and decompress it to use the directories and files inside. (``tar`` means tape archive and ``gz`` means archive file compressed by the standard GNU zip, gzip, compression algorithm)

**A. Remotely copy the assignment archive file**

We will use the ``scp`` (secure copy) command for this task to copy files among hosts in a network (whereas ``cp`` is used to copy files locally in a computer). The ``scp`` syntax is ``scp [-options] source destination``:

.. code-block:: bash

    scp [OPTIONS] user@SOURCE_HOST:path/filename user@DESTINATION_HOST:path/filename

Here in this assignment, we use the ``.`` to indicate that the destination is the current path and we don't want to change the filename. The password for the datacenter account at tychen.us is: InCharge56!

With the directories created, navigate (``cd``, change directory) into your ``~/class`` directory, then copy the file ``a01.tar.gz`` from the computer ``tychen.us`` into your class directory. The process is as follows (and as in the Introduction part above):

.. code-block:: bash

    cd ~/class
    scp datacenter@tychen.us:~/class/labs/a01.tar.gz .

When you are connecting to a remote host for the first time, you will see a message as follows, type ``yes`` to accept the encryption key:

.. code-block:: bash

    chen_user@vma50:~/class$ scp datacenter@tychen.us:/home/datacenter/class/labs/a01.tar.gz .
    The authenticity of host 'tychen.us (192.168.60.11)' can't be established.
    ECDSA key fingerprint is SHA256:IMsssTgl/fs3Uc8m+yGBsNE/KjOtV6I9vqbqe66q1No.
    Are you sure you want to continue connecting (yes/no)? yes

**B. Extract compressed files:**

We use the command ``tar`` to archive (package), compress, and decompress files depending on the options/flags we use. The general syntax is ``tar [OPTION] TAR_FILE``. To extract/decompress an archive or compressed/zipped file, we use the ``-x`` option (extraction) and the ``-f`` option (file).

Now, let us extract the files from within ``a01.tar.gz`` assignment file into your class directory following the steps:

- Make sure you are in the ``~/class`` directory
- Issue the command: ``tar -xf a01.tar.gz``
- To verify the extraction, issue the ``ls`` command in your ``a01`` directory to make sure you can find the ``a01config``, ``q01``, ``q02``, and ``q03`` files (## some of them are directories but in Unix everything is a file).

1.5 Check Your Work
-------------------

Check Your Work
~~~~~~~~~~~~~~~

You will use the bash script ``check01.sh`` in ``a01/q01`` to check your work of this part. Please perform the following steps:

- Change to your ``class/a01/q01`` directory.
- Open the file ``a01.txt`` using the nano editor: ``nano a01.txt``
- Use the arrow keys to move the cursor to the line starting with “A.”
- Enter the word “DONE” on the line starting with “A.” (leave a space after the dot)
- Save the file (using ``Ctrl-X`` in nano to exit, answer Yes to save, and enter to close the editor; note the nano bottom menu offers useful key-combinations)
- Run the script ``check01.sh`` (issue ``./check01.sh``) to check your answer. (# You should see all 5 OK’s.) (# the ``.`` of the ``./check01.sh`` instruction tells Unix-like systems to execute the script in the current environment/shell)

Note:
~~~~

- Instead of ``adduser``, you may use the command ``useradd`` for user and group operations. ``useradd`` is a native compiled binary executive file that comes with Linux, while ``adduser`` is a script using ``useradd`` to create user-friendly syntax. For more information, see this `superuser.com Q&A <https://superuser.com/questions/547966/whats-the-difference-between-adduser-and-useradd>`_.

Part 2. Managing Web Content
----------------------------

Managing Web Content
~~~~~~~~~~~~~~~~~~~~

We will learn how to configure the Apache HTTP server to serve web contents to the Web for you to get a hands-on experience of information systems and server configuration.

Then, we will practice how to copy, compress and decompress, and move files. In the end, you will see how the data in the car dealership database (which we will use intensively later) look like. As you probably have found out, this assignment is quite integrative and it involves file operations to lead to later database operations.

2.1 Configure Apache HTTP Server
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You should do this configuration as a system administrator (sudoer, namely, the your-last-name_admin account). The changes you make will affect all user accounts on your VM.

Apache is a popular Web server like Nginx and Microsoft IIS with a large market share.

2.2 Verifying Web Server Status
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**A. Check the HTTP server**

After installing Apache as instructed in Part 0, use a web browser to determine if your web server is serving as expected.

Visiting the URL of http://YOUR_IP_ADDRESS. You should see a standard “Apache2 Ubuntu Default Page” page indicating that the web server is working.

.. image:: ../images/labs/lab1/apache.jpg
   :align: center

Change the index.html file
~~~~~~~~~~~~~~~~~~~~~~~~~~

*Note that, from time to time, you would need to use ``sudo`` to elevate your permission for changing files.*

- As a **sudoer** (if you are logged in as a regular user, which you should be, you can switch user **su** to a sudoer account or exit and log back in as a sudoer), **cd** to the web directory ``/var/www/html``.

- Issue an ``ls`` command and you should see the ``index.html`` file. Use ``nano`` to take a look at the contents of the file and you should see it contains a lot of HTML code. You should recognize some of the text (e.g., ^+W to search for "It works!") to see that this file is the default Ubuntu Apache webpage. After confirming the file is correct, ^+X to close nano.

- Change the name of ``index.html`` (e.g., ``mv index.html index.html_APACHE``).

- Create a new file with the name ``index.html`` with one line of text in it: "Keanu Reeves is my cousin." Do not enter to add any blank lines. You can use ``nano index.html`` to create and edit and ^+X and **Yes** to save the file. You can use ``cat index.html`` to check file content.

- View the ``index.html`` file in your browser typing the URL ``http://YOUR_IP_ADDRESS`` and make sure the text you entered above is visible.

2.3 Expanding Your Website
~~~~~~~~~~~~~~~~~~~~~~~~~~

Often times, we do not create content but rather manage them. Next, we are going to expand the website to show a little information about the automobile dealerships, which is a dataset that we are going to use later.

**A. Copy and decompress files**

As a sudoer, copy the ``~/class/a01/web.tar`` file of the account your-last-name_user to the ``/var/www/html`` directory using ``cp`` (syntax: ``cp file path``) to copy the archive file ``web.tar`` from the ``a01`` directory to your web directory; then extract the content of the archive: (### you may need to use sudo here every once in a while)

.. code-block:: bash

    cp THE_PATH/web.tar  /var/www/html     
    cd /var/www/html
    tar -xvf web.tar     

    (# -x is an option for extract; -v means verbose mode; -f means file)

Follow the process above to complete this task.

**B. View to check the content**

Use a browser to view ``shs.html`` (http://YOUR_IP_ADDRESS/shs.html)

You should see the Southeastern Honda Sales webpage.

.. image:: ../images/labs/lab1/hondasales.jpg
   :align: center

**C. Delete a file**

Once you are convinced that your web directory is working,

delete (remove) the ``web.tar`` file from your ``public_html`` directory: ``rm web.tar`` (rm: remove).

**D. Create an archive and compress it**

We want to use the ``tar`` (tape archive) command to create an archive (.tar) of the web content files and then compress ("zip") the archive to a smaller file in size using the ``gzip`` command. The basic syntax of ``tar`` command to create archives is

.. code-block:: bash

    tar [option(s)] archive_name file_name(s) 

and we use option -c (create a new archive; as opposed to the -x option for extracting files from an archive) and option -f (file) here. The process is as follows:

.. code-block:: bash

    tar -cvf web.tar Logo.png new.html shs.html used.html  (where -v means verbose, so we can see what files are included in the archive)
    gzip web.tar  (using the gzip command for file compression) 
    cp web.tar.gz /home/last-name_user/class/a01/q02  (# copy the file to the working directory)  

Make sure you follow the process above to complete this task.

2.4 Check Your Work
~~~~~~~~~~~~~~~~~~~

Check Your Work
~~~~~~~~~~~~~~~

- As a regular user, change to your ``class/a01/q02`` directory.
- Edit the file ``a02.txt`` using the command ``nano a02.txt``.
- Use the arrow keys to move the cursor to the line starting with “A.”
- Enter the word “DONE” on the line starting with “A.” (leave a space before DONE).
- Save the file (using Ctrl-X).
- Run the script ``check02.sh`` (``./check02.sh``) to check your answers and receive feedback.

Part 3. Redirecting Text Streams
--------------------------------

Redirecting Text Streams
~~~~~~~~~~~~~~~~~~~~~~~~

Manipulating files and text streams is an important part of learning Unix-like systems. To familiarize you with the Linux operating system (specifically, the Ubuntu Linux distribution in our case), we will practice some basic output redirection tasks (see, e.g., input/output redirection). We will use some Linux commands to output text streams (which by default are sent to the terminal, the standard output, or STDOUT), and then use the redirection operators to create, overwrite, append, and merge the text streams into text files.

**A. Output redirection: Write/Overwrite**

The stream redirection operator ``>`` is an output redirector that redirects your text stream (generated by a command) to an output destination you specify, usually a text file. The syntax is ``command [option] > destination``.

Navigate to the tests directory in your home directory (``cd ~/tests/``), which you created earlier and

Use the output operator ``>`` to create two files as follows:

.. code-block:: bash

    chen_user@vma50:~$ cd tests/
    chen_user@vma50:~/tests$ ps -aef > jobs.txt  (# ps: process status)
    chen_user@vma50:~/tests$ pwd > files.txt  (# pwd: present working directory)
    chen_user@vma50:~/tests$ ls  
    files.txt  jobs.txt
    chen_user@vma50:~/tests$

**B. Output redirection: Append**

The stream redirection operator ``>>`` will append the output text stream to the end of the destination file. The syntax is ``command [option] >> destination``.

Before appending text, let's take a look at the content of the original file first:

.. code-block:: bash

    chen_user@vma50:~/tests$ ls
    files.txt  jobs.txt
    chen_user@vma50:~/tests$ cat files.txt 
    /home/chen_user/tests
    chen_user@vma50:~/tests$ 

Now let us try to append some command output text to the ``files.txt`` we created:

.. code-block:: bash

    ls –la . >> files.txt
    (# . presents the current path, can be omitted here; ls: list storage; -l: long format; -a: all files)

Now let's take a look at the updated ``files.txt`` by using the ``cat`` command:

.. code-block:: bash

    chen_user@vma50:~/tests$ cat files.txt 
    /home/chen_user/tests
    total 20
    drwxrwxr-x 2 chen_user chen_user 4096 Jan 12 02:40 .
    drwxr-xr-x 8 chen_user chen_user 4096 Jan 12 02:39 ..
    -rw-rw-r-- 1 chen_user chen_user   23 Jan 12 02:40 files.txt
    -rw-rw-r-- 1 chen_user chen_user 8190 Jan 12 02:39 jobs.txt
    chen_user@vma50:~/tests$

**C. Merge text files**

We will use the ``cat`` (concatenate) command to create text streams to merge files. ``cat``, by default, concatenates the text content of a file to the STDOUT (terminal). Instead of outputting to the terminal, we can use the output redirector ``>`` to redirect the text streams into another file, i.e., to merge the two files. Note that if the file you are sending the text stream to a filename that does not exist, the file will be created to complete the redirection. An example of merging ``a.txt`` and ``b.txt`` is:

.. code-block:: bash

    chen_user@vma50:~/tests$ echo "aaaaa" > a.txt 
    chen_user@vma50:~/tests$ echo "bbbbb" > b.txt 
    chen_user@vma50:~/tests$ cat a.txt 
    aaaaa
    chen_user@vma50:~/tests$ cat b.txt 
    bbbbb
    chen_user@vma50:~/tests$ cat a.txt b.txt > ab.txt
    chen_user@vma50:~/tests$ cat ab.txt 
    aaaaa
    bbbbb
    chen_user@vma50:~/tests$ 

- Observe the example above, we understand that the syntax of using ``cat`` for merging file is to append the content of the second file to the end of the content of the first file. Now try to merge ``jobs.txt`` to the end of ``files.txt`` into a new file called ``all.txt`` using ``cat`` and the redirection operators. Don't worry about making mistakes. They are easy to fix.

- Copy the ``*.txt`` files (``files.txt``, ``jobs.txt``, and ``all.txt``) that you have created to your ``~/class/a01/q03/`` directory (``cp *.txt ../class/a01/q03/`` or ``cp all.txt files.txt jobs.txt ../class/a01/q03/``).

Check Your Work
~~~~~~~~~~~~~~~

To check this part of the assignment:

- Change to your ``class/a01/q03`` directory.
- Edit the file ``a03.txt`` using the command ``nano a03.txt``.
- Use the arrow keys to move the cursor to the line starting with “A.”
- Enter the word “DONE” on the line starting with “A.”
- Save the file (using Ctrl-X).
- Run the script ``check03.sh`` (``./check03.sh``) to check your answer.

Note:
~~~~

- Other redirection operators such as **input redirection** operator ``<`` can be used in the **while loop** to input a file for iterative processing.
- A great introduction to Linux I/O redirection can be found at `DigitalOcean <https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-i-o-redirection>`_, which is very simple and readable.
- The **pipe operator** ``|``, as one of the control operators, will come in handy later when we use the ``grep`` command to search through text file/stream and pass the text stream over to chain next commands.
- A short list of control and redirection operators can be found at `StackExchange <https://unix.stackexchange.com/questions/159513/what-are-the-shells-control-and-redirection-operators>`_.
