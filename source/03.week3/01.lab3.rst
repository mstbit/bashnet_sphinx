Lab 03: Conditional Redirection And Environment (ENVs & Aliases)
================================================================

Assignment Instruction
----------------------

To successfully complete this assignment, you are advised to pay attention to the following:

1. **Follow instructions:** Read, interpret, and follow instructions very carefully. Finish reading the whole question and note the requirements before you start working on the question.
2. **Use resources:** You may use any resources available to you via the web. You are encouraged to discuss the problems with others before you sit down and attempt to answer the questions.
3. **Work independently:** While you are completing the questions, you are expected to work on your own without direct help from other people (non-human resources such as search engines are still allowed).
4. **Work together:** Come to the office hours to work as a group on the interpretation of and solutions to questions. When using text messaging, attach screenshots.
5. **For introduction to basic Linux and shell commands and special characters, see:**
   - `Linux & shell basic commands <https://bashnet.org/docs/linux_shell_commands.php>`_
   - `Linux & shell special characters <https://bashnet.org/docs/linux_special_characters.php>`_

Getting Started
---------------

1. **class directory:** To begin this assignment, make sure you navigate into the class directory under your user home directory.
2. **scp the tar file:** Use `scp` to copy the tar file `a03.tar.gz` from `datacenter@tychen.us` to your `~/class` directory. The command is: `scp datacenter@tychen.us:~/class/labs/a03.tar.gz .` (### don’t forget the “ . ” at the end of the command) and the password is `InCharge56!`
3. **unzip the tar file:** Extract the contents of the tar file: `tar -xf a03.tar.gz`. Once the files are extracted, you should see the `a03` folder (a directory containing several directories and files) in your class directory. These are the files you need to complete this assignment.
4. **a03:** Unless otherwise specified in the question, all file names are given relative to the directory `~/class/a03`.
5. **Passwords:** All the account names and the corresponding passwords are recorded in Canvas Assignment `a00`, where you keep them updated.

When You Are Done
-----------------

When you have completed the assignment,

1. **done.sh:** Run the script `done.sh` in `~/class` as follows:
   `./done.sh firstname lastname a03` (The `done.sh` script is part of Assignment `h01`.)
2. **lab03.txt:** The `done.sh` script will check your answers and create a new .txt called `lab03.txt` in the `a03` directory that you will need to submit to Canvas for assignment `a03`.
3. **Download lab03.txt to submit to Canvas:** From your local computer terminal (cmd or PowerShell for Windows and Terminal for macOS), change into a folder (e.g., `cd Documents` to go into your Documents folder). Use the `scp` command to copy your submission file from your VM to your local computer's Documents folder:
   `scp YOUR_USERNAME@YOUR_VM_IP_ADDRESS:~/class/a03/lab03.txt .`
   
   .. note::
      You can run the `done.sh` script at any point when you are working on the assignment and the content of the generated `lab03.txt` may be helpful in addition to the check scripts in each question. However, you must run it just prior to submitting the generated `lab03.txt` file in your `class/a03` directory to Canvas to make sure you are submitting the most recent file.
   
   .. note::
      To see your VM's IP address, run `ip addr` or `ifconfig` (installation of net-tools required).

Part 0. Introduction
--------------------

This assignment continues with Linux and expands on what you have learned about Linux scripts. The learning objectives include:

- Learning how to take user input for scanning and logging files
- Modifying your working environment using `.bash_aliases`
- Putting user input, file scanning/logging, and `.bash_aliases` into one script

It is often necessary to create a set of Linux commands as an environment (including environment variables, aliases, and functions/scripts) that provide administrative users with simple ways to complete those otherwise tedious and repetitive tasks. In this assignment, we will learn some common practices of how Linux system administrators customize their Linux environment to make their life easier. The skills and concepts you learn from this activity will help you see from the perspective of information systems administration. Such an experience is a proof that you have the foundational knowledge of Linux systems and shell scripting, which assures your prospective employers that you are comfortable with the technical aspects of the job you are seeking.

Your personal environment is loaded when you log into a computer (when the default configurations are read from various configuration files and executed). You have some control over what goes into your environment via modifying the configurations in the files such as `/etc/environment`, `/etc/profile`, `~/.bashrc`, `~/.profile`, and `~/.bash_aliases`. In this activity, we will modify that configuration by creating an additional file specifically to expand the Linux environment for this assignment. To do this we must:

1. Create the directories and scripts needed to implement our new tools,
2. Create a script to catch user input and perform file scanning,
3. Create a script to redirect command results into specified logs,
4. Create a file `~/myenv` to hold the commands that create our assignment-specific environment variables and aliases, and
5. Create the `./.bash_aliases` file and modify it to include the file, `~/myenv`; and finally, we will
6. Verify that everything works as designed.

To prepare for this activity, you will need to create two directories called `tmp` and `backup` in your home directory. Also, you should have created a user `bin` directory as part of Lab Activity 2.

- Create the `tmp` and `backup` directories in your user home directory (NOT the root home, or "/home", but your user home directory). Using the `mkdir directory1 directory2 ...` syntax, you can create multiple directories at once.
- If you didn’t create a `bin` directory as part of Activity 2, do so now.

Part 1. Conditional Redirection
-------------------------------

The `finder_v00.sh` script:

There is a file called `finder_v00.sh` within your `a03/q01` directory. This script can be modified to check for a specific file or directory in every user’s home directory, which is a common administrative task to perform. For example, `finder_v00.sh` can be used to see if all of the users have set up a `backup`, `class`, `public_html`, `tmp`, or `bin` directory. Using a script like `finder_v00.sh`, an administrator can automatically check the status of the user accounts in batch.

Backup first:

To accomplish this, the `finder_v00.sh` script needs to be modified. But we don't usually modify files directly; instead, we make sure we have two copies of the file: a backup copy and a working copy. We make modifications on the working copy only, so we always have the original file to fall back to in case the task does not go as planned. In other words, we will at least not make things worse.

Use the directory `~/class/a03/q01` to record your answers for this part of the assignment.

1.1 Backup Copy And Working Copy


We want to create a backup copy and a working copy of the file we are going to modify.

A. Backup copy:

Let us start by `cp` the file `finder_v00.sh` into your `backup` directory. Also, let us double-check to make sure it’s there by issuing the `ls` command:

- `cp` the file to the `backup` directory
- issuing `ls -l ~/backup/finder_v00.sh` to make sure the backup file is present in the intended directory.

B. Working copy:

We are going to rename the script to a working copy because we want to be clear we are working on the right file. This may seem trivial, but it could save a day when things get hectic and you don't even know if you could rely on the timestamps (use `ls -l` to see) to tell which file(s) are the working files. So, let us `cp` (or `mv`) `finder_v00.sh` to `q01.sh` as your working copy for accomplishing the required modifications.

- `cp` or `mv` `finder_v00.sh` to `q01.sh`.

1.2 Conditional Redirection

We want to run and read the scripts to learn about catching user input and redirection. Here we will first run and then read script `user_input.sh` to learn how to use the `read` command to take user input; and then run and read `redirect.sh` carefully to learn how to perform conditional redirection:

A. Run sample script `user_input.sh`:

Stand on the shoulders of your predecessors! In general, programmers spend more time in reading/reusing/fixing/enhancing the code written by their colleagues. In our case, we have two short scripts (`user_input.sh` and `redirect.sh`) in the `q01` directory, they provide examples of how to implement the changes you need. Let's run `user_input.sh` first:

.. code-block:: bash

    chen_user2@vma50:~/class/a03/q01$ ./user_input.sh 
    Please enter your last name: Chen
    Hello. Is this your last name: Chen?
    chen_user2@vma50:~/class/a03/q01$

We see that this script was written to interact with the user by prompting the user for their last name and will respond to user input by greeting the user and ask a question.

Run `./user_input.sh` to observe the behavior.

B. Observe sample script `user_input.sh`:

Now let's observe the file by `nano user_input.sh`. You will see:

.. code-block:: bash

    01 #!/bin/bash
    02 #
    03 #       Sample script to demonstrate getting user input from the terminal
    04 #
    05 #       Sample script with no editing of the input and no default
    06 #
    07 echo -n "Please enter your last name: "
    08 read name
    09 echo "Hello. Is this your last name: $name?"

We see that:

1. The script starts with a shebang line at line #1, and followed by bunch of comments.
2. Line #7 is an echo line, which will print the prompt message to the terminal. The `-n` option instructs the shell not to output the trailing newline.
3. Line #8 is an input (`read`) line that takes "name" as variable to point to the value from user input.
4. Line #9 is another echo line that prints out the message we want. Note that, Inside the message, variable `name` is referenced as `$name`, not `name`.

`nano user_input.sh` to read the code line by line to understand what it's doing.

C. Run and observe `redirect.sh`

Let's run and observe `redirect.sh`. When we do `./redirect.sh` and follow the prompt to enter `a01.txt`, which is a file we know exists in the directory, we see:

.. code-block:: bash

    chen_user2@vma50:~/class/a03/q01$ ./redirect.sh 
    Please enter a filename: a01.txt
    chen_user2@vma50:~/class/a03/q01$

The file did not give us any further feedback. However, if we `ls` the directory, we see an additional file, `success.log`:

.. code-block:: bash

    a01.bak  check01.sh   redirect.sh  user_input.sh
    a01.txt  error.log   finder_v00.sh  success.log 

Now let's take a look at the content of `success.log`:

.. code-block:: bash

    chen_user2@vma50:~/class/a03/q01$ cat success.log 
    This file logs commands that succeed
    a01.txt
    We looked for file a01.txt
    chen_user2@vma50:~/class/a03/q01$ 

Obviously, script `redirect.sh` redirected some text into the file `success.log`. Now let us take a look at the content of the script:

.. code-block:: bash

    01 #!/bin/bash
    02 
    03 # This script provides a simple example of how to redirect output resulting
    04 # from commands that execute properly and commands that do not.   
    05 
    06 ##### prompt (-n: no newline) and input->variable 
    07 echo -n "Please enter a filename: "
    08 read name
    09
    10 ##### echo text stream and redirect 
    11 echo "This file logs commands that succeed" > success.log
    12 echo "This file logs commands that fail (except this one)" > error.log
    13
    14 ########## Conditional Redirection ##########
    15 ### If $name is found, the ls $name command succeeds and 
    16 ###    the command output will go into the success.log file.
    17 ### If $name is not found, the "not found" output goes into error.log
    18 ls $name 1>> success.log 2>> error.log; 
    19 
    20 ########## Conditional Redirection ##########
    21 ### If $name is found, the "echo $name" command succeeds and 
    22 ###    its output will go into the success.log file.
    23 ### If $name is not found, the "not found" message goes into error.log.
    24 echo "We looked for file $name" 1>> success.log 2>> error.log

From the `redirection.sh` code above, we see that:

1. Line #7 is an echo line that prompts user for input.
2. Line #8 takes the user input from standard input (the `stdin` stream, the keyboard) and save it to a variable called `name`.
3. Line #11 and 12, we see that this script actually produced two files: `success.log` and `error.log`. These two lines are comment messages into each of the two log files and they are overwrite redirection. So, each time when we run the script, they will create the two new files of `success.log` and `error.log`.
4. Line #18 and line #24 perform conditional redirection. When the command succeeds, `1>>` takes effect. When the command fails, `2>>` takes effect. This "conditional" action is achieved in line #18 and 24 by using file descriptors (`1` and `2`) along with redirection (append) operator `>>`.

D. File descriptor

A file descriptor (or, file handle) is a unique number that points to a data stream. The three file descriptors of most interest to us are:

.. list-table::
   :header-rows: 1

   * - File Descriptor
     - Name
     - Abbreviation
   * - 0
     - Standard Input
     - STDIN
   * - 1
     - Standard Output
     - STDOUT
   * - 2
     - Standard Error
     - STDERR

Graphically, these three standard data streams work like this:

.. image:: ../images/std_streams.png
   :alt: Data streams

For example, at line #18, `ls $name 1>> success.log 2>> error.log;`, we see that the command is `ls $name`. `$name` performs variable substitution to reference to the content of variable `name`. In our case above, we enter "a01.txt" at the read prompt, so the value of `$name` is "a01.txt", which is a file that exists. Therefore, the shell will output the successful listing (`ls`) result to the `stdout` data stream (file descriptor 1), which we redirect to `success.log` by using `1>>`, and the `2>> error.log` part is ignored. In the case that the file does not exist, `ls $name` will result in an error (`stderr`), which data stream has file descriptor number 2. We then redirect it to `error.log` by using `2>> error.log`, and the `1>>` part is ignored.

In line#18 of `redirect.sh`, we use file descriptors (fd) number 1 (`stdout`) and 2 (`stderr`) to point to the data source and then use the redirection operator `>>` to direct the text stream to files. This creates a conditional redirection much like a shorthand for `if` statement.

Use `nano` to open `redirect.sh` and examine the code closely. Make sure you understand how conditional redirection works using file descriptor 1 and 2.

1.3 Create Conditional Redirection

With our understanding in user input and conditional redirection, we are ready to modify the script file `q01.sh`. Let us run the code, read the code, and finally modify the code.

A. Run `q01.sh`:

Before we modify it, let us run `./q01.sh` to take a look at the results. We should get something like this:

.. code-block:: bash

    OK, This is a list of where bin was found
    Oh no!  bin wasn't found here.
    Found bin
    Did NOT find bin
    ls: cannot access '/home/chen_admin/bin': No such file or directory
    4 /home/chen_user/bin
    chen_user@localhost:~/class/a03/q01$ 

We don't always want the output to be displayed on the screen like this. Log files are preferred in most cases because they are easier to read, process, and retrieve.

B. Check out the code

Now we `nano q01.sh` and see the script looks like this:

.. code-block:: bash

    1 #!/bin/bash       
    2 # echo "What file would you like to look for (good choices are bin, test, and public_html)"  
    3 file="bin"              # use bin as the default to start, we really want to read this from the terminal
    4 
    5 echo "OK, This is a list of where $file was found"      # This should output to success.log
    6 echo "Oh no!  $file wasn't found here."                 # This should output to error.log
    7
    8 echo "Found $file"                                      # This should output to success.log
    9 echo "Did NOT find $file"                               # This should output to error.log
    10 
    11 for homedir in /home/*; do
    12     ls --directory --size "$homedir/$file"       # This output should go to success.log (if found) or error.log (if not found)
    13 done

We see that line #1 is a shebang line, line #2 is commented out but it has a command `echo` in there. It would be interesting to see what will happen if we uncomment it. We would want line #5, 6, 8, and 9 to be redirect to the log files. Line #11 to 13 is a `for` loop, which will go through the files in `/home` directory. We can move on to modify this piece of code by performing the following tasks:

C. Enable user input:

Modify `q01.sh` so that it will:

Enable user prompt:

Modify the code (#2) so that it will prompt for the user to input a filename. In this script, we are suggested to monitor the user directories that we have created, which is a good idea since we know for sure if they exist or not.

Enable user input:

To take user input, we use the `read` command, which will scan `STDIN` for user input from keyboard. Right now, the input is hardcoded to default to the `bin` directory, which is not what we want. We want the script to take user input. Modify line #6 can help us achieve this purpose.

Set up redirection:

Simple redirection:

Modify line #5, 6, 8, and 9 to properly redirect text streams to the log files. The messages would go into the right logs as specified in the comments after the commands.

Conditional redirection:

The `for`-loop `for homedir in /home/*` will parse through directory `/home` and assign each of the filenames (user home directories in this case) to the loop variable `homedir` (home directory). Each of the user home directories will then be listed for the `$file` user input (`ls $homedir/$file`). After all user home directories are iterated, the loop is "done."

If the user of this script input "bin" for search, then since only some of the user accounts have the `bin` directory created in user home, some `ls $homedir/bin/` will be successful and some will say "No such file or directory". Here our job is to modify the line of command (line #24) inside the loop so that the `ls` results will be conditionally sent to either `error.log` or `success.log`. The rules of the conditional redirection are:

- Any standard (successful) output (`STDOUT`) messages are redirected to the file `success.log`
- Any error output (`STDERR`) messages are redirected to the file `error.log`

Check Your Work

Make a copy of the working script `q01.sh` as `finder_v01.sh` to the `backup` directory.

Once this script is working as you check the logs are correctly created, save a copy of `q01.sh` in your `~/backup` directory as `finder_v01.sh`.

Modify `a01.txt`: You know what to do.
Run the check script to see how you have done in this Part.

.. note::
   "In UNIX (and therefore Linux), everything is a file." So regular text files, directories, text/data streams, or even peripherals (device files), are treated as files by the operating system. In this regard, `STDIN`, `STDOUT`, and `STDERR` are treated as files and each given a file descriptor (fd). If you are intrigued by this statement, check out Wikipedia and other sources to dig deeper. For example, what does this statement mean in the file system? And what does it mean from the perspective of data stream and name space? As you may find out, technology can be philosophically amazing. ^^
   When the operating system opens a "file", a file descriptor is assigned to it so that the open file is kept in track. In C language, it is called a file handle.

Tile two terminals:

It is often useful to open two terminal windows, one for editing and one for testing your code. Tile the terminal windows in large enough size so you can see the chunks and structure of the scripts, which gives you a better idea about the logic of your code blocks (paragraphs). After all, programming languages are languages, and we will learn better by seeing they have pages, paragraphs, sentences, and vocabulary just like natural languages.

^-O:

You can use ^-O to save your modifications in the editing terminal without exiting `nano`. ^-O will save the file and you still remain in editing mode to continue with testing in the other terminal.

It is always a good idea to backup your work. By default, Microsoft Word automatically keeps a copy of your file every 10 minutes, which is probably a good indicator of how much time your clients and you can tolerate a loss of work in case of a technical issue.

Part 2. Environment: ENVs And Aliases At User Level
----------------------------------------------------

The idea here is that you are creating your own working environment. The aliases and environment variables you are creating here are administrative tools widely used in IT workplaces. The common locations for configuring Linux environment include the `.bashrc` and `.profile` files under the user home directory. In Ubuntu, it is suggested to use `~/.bash_aliases` to include additional aliases. if you define the hidden file `~/.bash_aliases` and source it from `.bashrc`, it will be executed every time your log in.

Our goal in this next set of steps is to personalize your Linux environment by loading certain functionalities you choose every time you log in.

Use the directory `~/class/a03/q02` to record your answers for this part of the assignment.

2.1 Create Environment Variables And Aliases

1. Create the environment definition file:
   To help us do this with less typing, change to your home directory and use `nano` to create a file called `myenv`.

2. Within `myenv`, create two environment variables:
   - defines an environment variable called `MYTMP` that represents your `~/tmp` directory
   - defines a second environment variable `A3` that represents your `~/class/a03` directory. You can use the `export` command to perform the definitions:
   
     .. code-block:: bash

        export MY_VAR=VALUE

   - check your environment variable using the `printenv` command (you need to `source` the definition file first):

     .. code-block:: bash

        chen_user@vma50:~/class/a03/q02$ printenv A3
        /home/chen_user/class/a03

3. Defines three aliases to do the following:
   - `vs` – views the contents of `success.log` using `cat $MYTMP/success.log`
   - `ve` – views the contents of `error.log` using `cat $MYTMP/error.log`
   - `rl` – removes the `$MYTMP/error.log` and `$MYTMP/success.log` files.

   The syntax for defining aliases is:
   
   .. code-block:: bash

      alias alias_name='command_to_run'

4. To execute the `myenv` file and make your environment variable and alias definitions available while you are in the CLI (terminal), use the `source` command:
   
   .. code-block:: bash

      source myenv

5. Now you can try the five variables in your CLI to make sure they work.

   .. code-block:: bash

      cd $A3  # will take you to the directory as defined by A3
      cd $MYTMP  # will take you to the directory as defined by MYTMP
      vs  # should show you the content of success.log in $MYTMP or give you an error if the directory or file is not available.
      chen_user@vma50:~/class/a03/q02$ vs
      cat: /home/chen_user/tmp/success.log: No such file or directory

      ve
      rl

2.2 Create .Bash_aliases

Here we want to create a `.bash_aliases` file in your home directory that “source” the `myenv` file every time you log in. This can be done using `nano` as follows:

- Change to your home directory
- Use `nano .bash_aliases` to enter the following bash statements into a `.bash_aliases` file and then save the file.

   .. code-block:: bash

      #!/bin/bash
      #
      #       Add my environment variables if the file exists.
      #
      if [ -f ~/myenv ]; then
         source ~/myenv
      fi

Check Your Work

Test the work above by opening another terminal window and then run `printenv` and `alias`. These commands should show you the environment variables and aliases you created. Changing to your `~/class/a03/q02` directory and running `check02.sh` will help you figure out what is wrong if the above doesn’t work as expected. Note that if you find any error with the check script and go back to modify your `myenv` file, you need to `source` it to populate the variables in your personal environment before checking again. When you are confident you have it working, enter DONE in the `~/class/a03/q02/a02.txt` file.

Part 3. Putting It All Together
-------------------------------

Use the directory `~/class/a03/q03` to record your answers for this part of the assignment.

A. Start by copying your `q01/q01.sh` file to `q03.sh`. If you have done the aliases and environment variables as defined in `q02`, you can achieve this copying task by:

.. code-block:: bash

    cp $A3/q01/q01.sh $A3/q03/q03.sh

B. Modify script `q03.sh` so that it creates the files `success.log` and `error.log` in your `$MYTMP` directory, rather than in the `q03` directory. Note that here we use a `for` loop to parse through all user directories in system `/home` and redirect (`>>`) the results (li) successfully found or not found with an error.

Use file descriptor (fd) and redirection operator (`>>`) to achieve conditional redirection.

C. Add two statements to the bottom of your `q03.sh` scripts that will use your `vs` and `ve` aliases and redirect their output to `$MYTMP/summary03.log` as follows (because we source the `myenv` file, we can use aliases in our script):

.. code-block:: bash

    vs > $MYTMP/summary03.log
    ve >> $MYTMP/summary03.log 

D. Make `q03.sh` available when logging in:

Finally, we need to make `q03.sh` work independently of where we run it from every time we log in using our individual account (but not to other users). To do that, we need to copy our final version to our personal `bin` directory:

.. code-block:: bash

    cp q03.sh ~/backup/finder_v02.sh
    cp q03.sh ~/bin/finder.sh

If you have set up your environment and script correctly, `finder.sh` will run from any directory. When it is run, it should create a file named `summary03.log` in the directory `~/tmp` each time it runs. This file should contain the results of both your `error.log` and `success.log` files.

Run `finder.sh` and look at the content of the file `~/tmp/summary03.log` to see if it contains what you expect it to contain. Running `./check03.sh` from within your `q03` directory to verify that everything is the right place and working properly or give you an idea of what might be wrong if it is not. Enter DONE in the `~/class/a03/q03/a03.txt` file when you are confident you have it working.

.. note::
   The syntax of `cp` is `cp [options] SOURCE_FILENAME TARGET_FILENAME` (will rename), or `cp [options] SOURCE_FILE TARGET_DIRECTORY` (will not rename).
