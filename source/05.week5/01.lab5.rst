Lab 05: Managing Dataset Quality: Text Vs. SQL
=============================================

Assignment Instruction
----------------------

To successfully complete this assignment, you are advised to pay attention to the following:

1. **Follow instructions:** Read, interpret, and follow instructions very carefully. Finish reading the whole question and note the requirements before you start working on the question.
2. **Use resources:** You may use any resources available to you via the web. You are encouraged to discuss the problems with others before you sit down and attempt to answer the questions.
3. **Work independently:** While you are completing the questions, you are expected to work on your own without direct help from other people (non-human resources such as search engines are still allowed).
4. **Work together:** Come to the office hours to work as a group on the interpretation of and solutions to questions. When using text messaging, attach screenshots.
5. **For introduction to basic Linux and shell commands and special characters, see:**
   - `Linux & shell basic commands <https://bashnet.org/docs/linux_shell_commands.php>`_
   - `Linux & shell special characters <https://bashnet.org/docs/linux_special_characters.php>`_

Getting Started
---------------

1. **class directory:** To begin this assignment, make sure you navigate into the class directory under your user home directory.
2. **scp the tar file:** Use ``scp`` to copy the tar file ``a05.tar.gz`` from ``datacenter@tychen.us`` to your ``~/class`` directory. The command is: ``scp datacenter@tychen.us:~/class/labs/a05.tar.gz .`` (### don’t forget the “ . ” at the end of the command) and the password is “InCharge56!”
3. **unzip the tar file:** Extract the contents of the tar file: ``tar -xf a05.tar.gz``. Once the files are extracted, you should see the ``a05`` folder (a directory containing several directories and files) in your class directory. These are the files you need to complete this assignment.
4. **a05:** Unless otherwise specified in the question, all file names are given relative to the directory ``~/class/a05``.
5. **Passwords:** All the account names and the corresponding passwords are recorded in Canvas Assignment ``a00``, where you keep them updated.

When you have completed the assignment:

1. **done.sh:** Run the script ``done.sh`` in ``~/class`` as follows:
   ``./done.sh firstname lastname a05`` (The ``done.sh`` script is part of Assignment ``h01``.)
2. **lab05.txt:** The ``done.sh`` script will check your answers and create a new .txt called ``lab05.txt`` in the ``a05`` directory that you will need to submit to Canvas for assignment ``a05``.
3. **Download lab05.txt to submit to Canvas:** From your local computer terminal (cmd or PowerShell for Windows and Terminal for macOS), change into a folder (e.g., ``cd Documents`` to go into your Documents folder). Use the ``scp`` command to copy your submission file from your VM to your local computer's Documents folder:
   ``scp YOUR_USERNAME@YOUR_VM_IP_ADDRESS:~/class/a05/lab05.txt .``

Note:

You can run the ``done.sh`` script at any point when you are working on the assignment and the content of the generated ``lab05.txt`` may be helpful in addition to the check scripts in each question. However, you must run it just prior to submitting the generated ``lab05.txt`` file in your ``class/a05`` directory to Canvas to make sure you are submitting the most recent file.

To see your VM's IP address, run ``ip addr`` or ``ifconfig`` (installation of netools required).

Part 0: Introduction
--------------------

This lab continues our introduction to the administration of MySQL database management system (DBMS) at a fundamental level. In our last lab, we have added user accounts, created a database (sales), and inserted three small tables (agents, dealers, and owners) into the database. In this lab, we are going to perform the following to practice managing larger datasets:

- Adding large datasets to a MySQL database
- Check the quality of the data
- Backup and restoring MySQL databases

In this lab, we are going to add additional data to our dataset. This dataset includes sales data for car sales between 2010 and 2015. Part of the challenge here is to make sure that the data entered into the database is in fact correct. This lab will focus on some of the basic automated approaches to achieve the objective of data quality control. The success and quality of your daily tasks as an IT professional depends on how much you put into planning and preparation, because IT is all about managing resources and processes.

As with the last lab, this is a complex activity that requires carefully following the directions. You and your partner should take your time and work carefully.

**OBJECTIVES**

For this activity, our goal is to create a database containing the car sales tables from 2010 to 2015. These tables hold data on the sales, dealerships, and sales agents who made the sales. In the process of this lab, we will

1. read the sales data from files and insert them into your database, and
2. run tests to ensure that we have done them correctly.

Part 1: Preparing Data & Environment
------------------------------------

1.1 Know Your Data
~~~~~~~~~~~~~~~~~~

The data: When ``a05.tar.gz`` has been unpacked, it will create a directory called ``SALESDATA`` in ``a05/q01``. This directory contains directories and text files containing the individual car sales records for each year, week and dealership between 2010 and 2015. Please navigate through the directories to take a look the .txt files. Know your data and you will feel more comfortable manipulating them:

- How are the directories structured? (Year/Week)
- How many subdirectories/files in each directory? (39)
- What kind of sales are there? (New/Used)
- What fields do you see in each entry? (VIN, Model, Year, Price… Agent ID)
- Each .txt file represents one dealer (1 file for each of the 39 dealers)

Complete the rest of Part 1 in the ``~/class/a05/q01`` directory.

1.2 Configure The Environment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A. **The env_mysql file**

Start by defining some environment variables that will be used to tell your scripts the values of your MySQL username, your mysql password and your data source. Create a file in ``q01`` called ``env_mysql``. This file should contain the definitions of three environment variables and a single line to check your definitions as follows:

.. code-block:: bash

   export MYSQL_USER='salesadmin' 
   (# The export command will mark each VAR for automatic export to the environment of subsequently executed commands; i.e., make the local shell variable VAR global.)
   export MYSQL_PASS='password' 
   (# replace password with your own password)
   export MYSQL_DATA="$HOME/class/a05/q01/SALESDATA"
   printenv | grep -i MYSQL_ (# printenv == print environment variables; you should see the 3 variables you just exported.) 

B. **source** the environment variable definition file.

Once you have correctly created the ``env_mysql`` file, ``printenv`` (or ``env``) and then pipe ``grep`` with proper string should let you check to confirm the environment variables are defined as expected.

1.3 Create SQL Statements
~~~~~~~~~~~~~~~~~~~~~~~~~

Next, you will have to run a program to create the SQL statements needed to insert each of the sales transaction into the database. This step reads the sales data from the weekly sales reports for each dealership and creates files containing the SQL statements needed to insert that information into the MySQL database. To complete this step, you will need to run the program ``annual_sales.pl`` and provide it with the year of the data to insert (2010 to 2015).

The program will ask you for the year and then create a file called ``salesXXXX.sql`` (where XXXX is the year) within the ``sXXXX`` subdirectory. You will need to run this once for each year (2010 to 2015).

.. code-block:: bash

   ./annual_sales.pl (# you will be asked for user input of year) 

1.4 Check Your Work
~~~~~~~~~~~~~~~~~~~

When you are done,

- run ``./check01.sh`` to make sure everything checks out OK.
- Finally, enter DONE in part A of ``a01.txt``.

Part 2: Inserting The Sales Data Into MySQL
-------------------------------------------

2.1 Create Symbolic (Soft) Links
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Running ``annual_sales.pl`` for each year was relatively quick but inserting each year’s data into your mysql database is NOT. Each year’s data can take up to 8 minutes to insert the 60,000 – 90,000 sales records into the database. Due to the amount of data to process, we will run them as Linux background jobs using & so that we don’t have to wait for them to complete one year before starting the next year. In total, all processes running in parallel will take about 35 minutes to complete.

If you have not yet completed Part 1, make sure you go back and do it now before you can perform the database insertion.

In this part of the lab, we will need access to the sql files that you created in Part 1. To accomplish this, make sure you are in the ``a05/q02`` directory and do the following:

- Make sure the SQL statement files are created correctly. For example, issue the command ``ls -l ../q01`` will show that you have directory ``s2010~s2015`` in ``q01`` with proper timestamps from ``annual_sales.pl`` execution. Also, issue the command ``ls -l ../q01/s2010`` will show the SQL statement files like the following:

.. code-block:: bash

   chen_user@vma50:~/class/a05/q02$ ls -l ../q01/s2010
   total 19544
   -rw-rw-r-- 1 chen_user chen_user   1396 Mar  6 19:49 sales2010.sql
   -rw-rw-r-- 1 chen_user chen_user 380953 Mar  6 19:49 salesweek01.sql
   -rw-rw-r-- 1 chen_user chen_user 381910 Mar  6 19:49 salesweek02.sql
   -rw-rw-r-- 1 chen_user chen_user 382279 Mar  6 19:49 salesweek03.sql
   ...

- Create links to the directories (``s2010~s2015``) containing the .sql files by using the ``ln`` command like:

.. code-block:: bash

   ln -s ../q01/s2010 s2010

- After finishing soft-linking all the directories, use ``ls –l`` in ``q02`` to make sure the symlinks are created successfully. The results should look like the following with links to all 6 years of .sql files.

.. code-block:: bash

   lrwxrwxrwx 1 chen_user chen_user   12 Mar  6 20:06 s2010 -> ../q01/s2010
   lrwxrwxrwx 1 chen_user chen_user   12 Mar  6 20:06 s2011 -> ../q01/s2011
   ...

2.2 Insert The Data
~~~~~~~~~~~~~~~~~~~

For this next step, run the command to insert data FOR EACH YEAR.

If the insertion commands are run for more than once for a given year at the same time, the second attempt will delete the table the other user is using. This will create a large number of errors.

Once you have a plan for inserting the data, do the following once for each year 2010 to 2015 where XXXX is the year:

- Change to the ``q02/sXXXX`` directory and then run a mysql statement to get input from the ``salesXXXX.sql`` file using the MYSQL account and password environment variables you create in ``q01`` (source the ``env_mysql`` to make the environment variables available if they are not). Run the ``salesXXXX.sql`` file in the folders of all the years (we are using the environment variables from ``q01``. source it to make them available if they are not):

.. code-block:: bash

   cd sXXXX
   mysql -u $MYSQL_USER -p$MYSQL_PASS < salesXXXX.sql & (### &: run in subshell) 

- Since we are using the ampersand control operator &, the command will run in a subshell (~background). These processes running through the ampersand operator will also "stay alive" even if the ssh session is closed!). Therefore, we can enter to exit back to the command line (or even exit to sign out of the CLI) without terminating the process because it is running in a subshell.
- If you perform the same data insertion job without the ampersand control operator &, you would have to wait for the job to finish.

2.3 Monitor The Progress
~~~~~~~~~~~~~~~~~~~~~~~~

You can use the following SQL command to monitor the progress of the data insertion (*.sql execution). Log into MySQL shell, run it on the same year for several times to see the number of records increasing. (Don't forget to USE database first.)

.. code-block:: sql

   SELECT COUNT(*) FROM sales_20XX 
   (# no space after COUNT)
   (# unlike SELECT *, SELECT COUNT(*) does not have resource issue) 

If everything went as planned, you and your lab partners would have inserted about 450,000 car sales records into the sales database. In the next few parts of the problem, we will check these results in detail. For now, we will just do a quick check of the total number of cars sold in each year.

2.4 Check Your Work
~~~~~~~~~~~~~~~~~~~

In order for the check to proceed, your MYSQL_USER and MYSQL_PASS environment variables must be set and active as described in Part 1. (# meaning: source it!)

- Use the script ``check02.sh`` to verify that your group has created the necessary tables and inserted data into the database. Note that the data insertion will take several minutes. Before it is finished, running the check script will give you a NOT OK error like:

.. code-block:: text

   Not OK - yearly sales count values  ( 7230682305 )                  chxq02-D0

- You will see 4 OK's like the following when the processes are completed successfully:

.. code-block:: bash

   chen_user@vma50:~/class/a05/q02$ ./check02.sh
   Checking your MYSQL_USER, MYSQL_PASS and MYSQL_DATA environment variables
              OK - q01/env_mysql check                                 chxq02-A1
   MYSQL_USER=salesadmin
   MYSQL_DATA=/home/chen_user/class/a05/q01/SALESDATA
   MYSQL_PASS=pass2020
              OK - sales database                                      chxq02-B1
              OK - yearly sales tables                                 chxq02-C1
              OK - yearly sales count values                           chxq02-D1

When you are done, enter DONE into part A of ``a02.txt``.

Part 3: Check Sales Data In MySQL
---------------------------------

3.1 Create .Sql File
~~~~~~~~~~~~~~~~~~~~

Create a MySQL input script (call it ``q03.sql``) to verify that the information in the database is correct by creating a series of MySQL statements to answer the following questions from A to E. It is recommended that you:

- Tile two SSH terminals for a task like this: One for coding, the other testing.
- Comment and design your code blocks, then write the query.
- Test the query in another terminal in mysql shell. When you satisfied with the result, copy-n-paste it over to ``q03.sql``.
- In nano, use Ctl-O to save but not exit the nano editing mode.
- use DESCRIBE table_name to observe the fields: Primary key, auto_increment
- use SELECT * FROM sales_20xx LIMIT 10 to observe records
- note that in a .sql file, we start with USE db_name;

Questions
~~~~~~~~~

A. How many cars were sold in 2010?
B. How many cars were sold in July in 2013?
C. How many Honda Odyssey’s were sold in 2015?
D. How many cars did Linda Carr sell in 2014?
E. What was the profit on the sale of the vehicle with VIN: JE142FU154525XBX8?

3.2 Run The .Sql File
~~~~~~~~~~~~~~~~~~~~~

While you are working on the .sql file, you can run it in the mysql shell using the following command to see the results as you incrementally write the SQL statements:

.. code-block:: bash

   source q03.sql  

After you have completed the .sql file, run it in the Linux command line shell to see the results:

.. code-block:: bash

   mysql -u $MYSQL_USER -p$MYSQL_PASS < q03.sql 

Finally, redirect the results to a file (``q03.txt``) when you run the .sql file in Linux command line as follows:

.. code-block:: bash

   mysql -u $MYSQL_USER -p$MYSQL_PASS < q03.sql > q03.txt 

If you encounter error messages regarding the two USER and PASS environment variables, it is possible that you have work in a different shell context now. Just run the ``env_mysql`` file again: ``source ../q01/env_mysql`` in this current shell to continue.

3.3 Check Your Work
~~~~~~~~~~~~~~~~~~~

Run mysql as described above to create the file ``q03.txt`` with the results of your sql statements. Enter the answers to A-E into ``a03.txt`` and use the script ``check03.sh`` to verify that you created the correct files.

Note:

1. The syntax of INNER JOIN is:

.. code-block:: sql

   SELECT column_name(s)
   FROM table1
   INNER JOIN table2
   ON table1.column_name = table2.column_name;

2. Calculating profit: A good way to get profit using SQL query in this context is:

.. code-block:: sql

   SELECT ( price_sold - dealer_cost ) 

   since sold price minus cost equals profit.

3. UNION ALL: Since one car may be sold for multiple times over the years, it is a good strategy to use UNION ALL to make sure we cover all the years when necessary.

Part 4: Checking The Sales Data In The SALESDATA Files
------------------------------------------------------

Purpose
~~~~~~~

Quality Control

In this part of the lab, we want to create a bash script called ``q04.sh`` to examine the data in the text files so we can compare the information in our original data text files with the data in the SQL files we generated in Part 1 and with the data that ended up in our database in Part 2. Specifically, we are checking the accuracy of data by comparing the results from grepping the files in SALESDATA and the database query results from Part 3.

To search over the files for the records we want, we need to carefully observe the dataset. The more we know the data, the better accuracy we can have when searching through the dataset.

4.1 Create The Script
~~~~~~~~~~~~~~~~~~~~~

Your script ``q04.sh`` must be able to do the following:

1. Create a link to the SALESDATA in ``q04``, if one does not already exist, using:

.. code-block:: bash

   ln -s ../q01/SALESDATA SALESDATA 

2. Determine the total number of cars sold by all dealerships combined in each of the years 2010 through 2015.
3. Determine the total number of cars sold by all dealerships combined in July of each year.
4. Determine the total number of Honda Odyssey’s sold by all dealerships combined in each year.
5. Determine the total number of cars sold by Linda Carr in each year.
6. List the sales data associated with a specific VIN provided as a command line parameter. (### In the script, assign the VIN you used in Part 3 into a variable as the default VIN number. If you want, write an if statement to receive a command line argument in the form of positional parameter to update the VIN. Do not read to prompt for user input, or the check script will hang.)
7. Determine the total number of cars sold by all dealerships combined in all years.

4.2 Check Your Work
~~~~~~~~~~~~~~~~~~~

When you have completed the script, run ``check04.sh`` to check it. This will take a while to complete.

Use the information produced with ``q04.sh`` to determine the answers for A-E in ``a04.txt``. In ``a04.txt`` enter the following:

Questions
~~~~~~~~~

A. The number of cars sold in 2010
B. The number of cars sold in July 2013.
C. The number of Honda Odyssey’s sold in 2015.
D. The number of cars sold by Linda Carr in 2014.
E. The model type of the car with VIN JE142FU154525XBX8.

Note:

These results should be the same as Part 3 except for question E.

Part 4.1 ask for grep results from all the years, so it makes sense to build a for loop like ``for year in {2010..2015}; do .... done`` to save your time. Inside the loop, we can use ``SALESDATA/y$year`` to point to the specific year.

``grep`` has an option ``-r`` that would allow you to search recursively. The other choice is globbing, e.g., ``SALESDATA/y$year/week*/sales$year*.txt``.

Use the regular expression anchor ``^`` to make sure you are searching the transaction data rows because, as we talked about when introducing the database, all VIN's begin with a space and then J because these are Honda cars from Japan. So you may begin each of your search with ``grep '^ J'``.

For the part of searching for July sales, the use of ``-w`` is suggested to avoid getting extra results.

Part 5: Creating A Backup Of The Database
-----------------------------------------

5.1 Create The Data Dump
~~~~~~~~~~~~~~~~~~~~~~~~

Complete this part in ``a05/q05``.

Once you are convinced your database is correct after the checking procedures in Part 3 and 4, create a backup of the database as follows. We will use the MySQL database client backup utility program available in Linux: ``mysqldump``. This utility produces a set of SQL statements that can be executed to reproduce the original database object definitions and data tables. It dumps one or more MySQL databases for backup or transferring to another SQL server. The ``mysqldump`` command can also generate output in CSV, other delimited text, or XML format (``man mysqldump`` for details). The syntax of the command is as below:

.. code-block:: bash

   mysqldump --no-tablespaces -h localhost -u salesadmin -ppassword sales > salesv00.sql
   (# where -h option requires the hostname)  

- Determine the size of the file ``salesv00.sql`` in bytes using:

.. code-block:: bash

   ls -l (# record the size) 

- Compress the file using:

.. code-block:: bash

   gzip salesv00.sql

- Determine the size of the compressed file ``salesv00.sql.gz`` in bytes. (The opposite of ``gzip`` is ``gunzip`` with similar syntax.)
- Create the directory named ``backup`` in your home directory (if you haven’t done so already) and move the zipped file (``salesv00.sql.gz``) into it.

Once you have completed those steps run ``check05.sh``. It will ask you to answer the following questions.

Questions
~~~~~~~~~

A. What is the size of the backup file in Megabytes (uncompressed size divide by 1024 x 1024 or 1,048,576)? You should give you answer to the nearest Megabyte.
B. What is the size of the compressed backup file in Megabytes? You should give your answer to the nearest Megabyte.
C. What is the compression ratio in percent (100 x Uncompressed Size in MBytes/Compressed size in MByte) for your database backup file? Round your answer to the nearest 10 percentage points, for example, if you calculated a 438% compression enter the number 440 instead of 438.

5.2 Check Your Work
~~~~~~~~~~~~~~~~~~~

When you have completed the script, run ``check05.sh`` to check it. When you have completed the above, enter DONE in part A of ``a05.txt``.

Note:

If you run ``mysqldump`` without the ``--no-tablespaces`` option, you may receive an error message as:

.. code-block:: bash

   chen_user@vma50:~/class/a05/q05$ mysqldump -h localhost -u salesadmin -p$MYSQL_PASS sales > salesv00.sql
   mysqldump: [Warning] Using a password on the command line interface can be insecure.
   mysqldump: Error: 'Access denied; you need (at least one of) the PROCESS privilege(s) for this operation' when trying to dump tablespaces.
