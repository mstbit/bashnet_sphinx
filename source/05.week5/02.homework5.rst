Assignment Instruction
----------------------

To successfully complete this assignment, you are advised to pay attention to the following:

1. **Follow instructions:** Read, interpret, and follow instructions very carefully. Finish reading the whole question and note the requirements before you start working on the question.

2. **Use resources:** You may use any resources available to you via the web. You are encouraged to discuss the problems with others before you sit down and attempt to answer the questions.

3. **Work independently:** While you are completing the questions, you are expected to work on your own without direct help from other people (non-human resources such as search engines are still allowed).

4. **Work together:** Come to the office hours to work as a group on the interpretation of and solutions to questions. When using text messaging, attach screenshots.

5. **For introduction to basic Linux and shell commands and special characters, see:**
   
   - For Linux commands, see :ref:`Linux Shell Commands <linux_shell_commands>`
  
   - For special characters, see :ref:`Linux Shell Special Characters <linux_shell_special_characters>`

Getting Started
---------------

1. **class directory:** To begin this assignment, make sure you navigate into the class directory under your user home directory.

2. **scp the tar file:** Use ``scp`` to copy the tar file ``h04.tar.gz`` from ``datacenter@tychen.us`` to your ``~/class`` directory. The command is: ``scp datacenter@tychen.us:~/class/hw/h04.tar.gz .`` (### don’t forget the “ . ” at the end of the command) and the password is ``InCharge56!``

3. **unzip the tar file:** Extract the contents of the tar file: ``tar -xf h05.tar.gz``. Once the files are extracted, you should see the ``h04`` folder (a directory containing several directories and files) in your class directory. These are the files you need to complete this assignment.

4. **h04:** Unless otherwise specified in the question, all file names are given relative to the directory ``~/class/h05``.

5. **Passwords:** All the account names and the corresponding passwords are recorded in Canvas Assignment a00, where you keep them updated.

When You Are Done
-----------------

When you have completed the assignment,

1. **done.sh:** Run the script ``done.sh`` in ``~/class`` as follows:

   ::

      ./done.sh firstname lastname h04

   (The ``done.sh`` script is part of Assignment h01.)

2. **hwk04.txt:** The ``done.sh`` script will check your answers and create a new .txt called ``hwk05.txt`` in the h04 directory that you will need to submit to Canvas for assignment h04.

3. **Download hwk05.txt to submit to Canvas:** From your local computer terminal (cmd or PowerShell for Windows and Terminal for macOS), change into a folder (e.g., ``cd Documents`` to go into your Documents folder). Use the ``scp`` command to copy your submission file from your VM to your local computer's Documents folder:

   ::

      scp YOUR_USERNAME@YOUR_VM_IP_ADDRESS:~/class/h05/hwk05.txt .

Additional Notes
----------------

- You can run the ``done.sh`` script at any point when you are working on the assignment and the content of the generated ``hwk04.txt`` may be helpful in addition to the check scripts in each question. However, you must run it just prior to submitting the generated ``hwk04.txt`` file in your ``class/h04`` directory to Canvas to make sure you are submitting the most recent file.

- To see your VM's IP address, run ``ip addr`` or ``ifconfig`` (installation of netools required).

Question 1.Know Your Data
--------------------------

The data: When ``a05.tar.gz`` has been unpacked, it will create a directory called ``SALESDATA`` in ``a05/q01``. This directory contains directories and text files containing the individual car sales records for each year, week, and dealership between 2010 and 2015. Please navigate through the directories to take a look at the ``.txt`` files. Know your data and you will feel more comfortable manipulating them.

- How are the directories structured? (Year/Week)
- How many subdirectories/files are in each directory?
- What kind of sales are there? (New/Used)
- What fields do you see in each entry? (VIN, Model, Year, Price, Agent ID)
- Each ``.txt`` file represents one dealer.

Complete the rest of Part 1 in the ``~/class/a05/q01`` directory.

grep for Patterns: .txt
-----------------------

Using the information in the ``insert_data.txt`` file:

- Construct the appropriate combination of ``grep`` and ``wc`` commands to answer the following questions:

  1. How many quiz scores are recorded in this dataset?
  2. How many times did a student score a 10 on one of the quizzes (count every occurrence of a student scoring a 10 – when a particular student scores a 10 on two quizzes both scores should be counted)?
  3. How many students scored a 35 on exam 3?
  4. How many students have a score for exam 1?
  5. On how many quizzes did EMMA JOHNSON score a 6?

Use ``q02/a02.txt`` to record your answers.

Note: This question uses the same ``insert_data.sql`` and ``insert_data.txt`` files as referenced in Question 1.

Tip: I'd first issue commands like ``head -n 50 insert_data.txt`` to get a good sense of how this dataset looks like. After knowing how this dataset looks like, explore the search by issuing a command like ``grep -n -m 20 ", TYPE=QU," insert_data.txt``. ``-n`` gives us line numbers, and ``-m`` gives us the maximum number of results to show.

If you are meticulous about question D, you were probably thinking about how to make sure the integer string characters after ``SCORE=`` exist or not. We all work with data that we do not generate by ourselves, so there's no way of knowing if that's true or not, and in most cases, we simply are not able to manually examine the data because there are too many entries to go through.

In the case of getting numerical patterns, we may use regular expressions (REGEX) to help. When we grep using ``, TYPE=EX, ITEM_ID=1, SCORE=[0-9]``, we are making sure that there are integers after ``SCORE=``. In this question, we will get the same answer as when not using the ``[0-9]`` regular expression, but this technique can come in handy in the future.

grep for Patterns: .sql
-----------------------

Using the information in the ``insert_data.sql`` file:

- Construct the appropriate combination of ``grep`` and ``wc`` commands to answer the following questions:

  1. How many homework scores are recorded in this dataset?
  2. How many times did a student score a 4 on one of the homework assignments (count every occurrence of a student scoring a 4 – when a particular student scores a 4 on two different homework assignments both scores should be counted)?
  3. How many students scored a 9 on quiz 3?
  4. What is the student ID for the entry with a primary key of 169?
  5. On how many homework assignments did ERIC HARRISON score a 5?

Use ``q03/a03.txt`` to record your answers.

Note: For this question, use the same ``insert_data.sql`` and ``insert_data.txt`` files as referenced in Question 1.

Tip: But, in question A, how do we know if there are some rows/entries/lines that were not accounted for? The ``-v`` (inverse) option in ``grep`` may prove to be convenient. We can issue the same grep expression, only this time with an additional ``-v`` option to see what lines are not included in the grep results. In this question, you should see that the top couple of lines are SQL commands, and they are the only lines not included in our early search. We can then run another grep query to look for the total number of lines (or simply do ``wc -l file``). The first and second grep should add up to the 3rd grep.

While Read
----------

Create a script ``q04.sh`` in ``q04`` that:

- Accepts a list of first and last names of students from a file (the file name is specified by the single input positional parameter), and
- Prints out some initial header information (the student’s name) followed by all of each student’s scores on:
  
  1. All of the homework assignments
  2. All the quizzes
  3. All of their exams using the same format as contained in ``insert_data.txt``.

For example, the file ``list.dat`` contains the names of four students (one per line). So, the command:

``./q04.sh list.dat``

Will print out the 21 entries for each of the four students, the last of which looks something like the following:

::

  Scores for MADISON WILLIAMS
  HOMEWORK SCORES ======
  PKEY=43, STUDENT_ID=4, FNAME=MADISON, LNAME=WILLIAMS, TYPE=HW, ITEM_ID=1, SCORE=3
  PKEY=44, STUDENT_ID=4, FNAME=MADISON, LNAME=WILLIAMS, TYPE=HW, ITEM_ID=2, SCORE=4
  PKEY=45, STUDENT_ID=4, FNAME=MADISON, LNAME=WILLIAMS, TYPE=HW, ITEM_ID=3, SCORE=4
  … etc. …

  QUIZ SCORES =====
  PKEY=54, STUDENT_ID=4, FNAME=MADISON, LNAME=WILLIAMS, TYPE=QU, ITEM_ID=1, SCORE=10
  PKEY=55, STUDENT_ID=4, FNAME=MADISON, LNAME=WILLIAMS, TYPE=QU, ITEM_ID=2, SCORE=6
  … etc. …

  EXAM SCORES =====
  PKEY=62, STUDENT_ID=4, FNAME=MADISON, LNAME=WILLIAMS, TYPE=EX, ITEM_ID=2, SCORE=33
  PKEY=63, STUDENT_ID=4, FNAME=MADISON, LNAME=WILLIAMS, TYPE=EX, ITEM_ID=3, SCORE=27

- To make the output more readable, put a blank line between consecutive student records.
- If the filename provided is blank or does not exist, print an error message and exit.

Note: This question uses the same ``insert_data.sql`` and ``insert_data.txt`` files as referenced in Question 1. To turn the echoed string to uppercase, use ``{$var^^}``.

Command Substitution
--------------------

Create a script ``q05.sh`` in ``q05`` that accepts:

- A **flag** (one of ``H``, ``Q``, or ``E`` as in Homework, Quiz, and Exam), and
- A **number**

as command-line arguments and prints out the following:

1. The number of homework assignments, quizzes, or exams with that score found in ``insert_data.txt``, and
2. The number of homework assignments, quizzes, or exams with that score found in ``insert_data.sql``.

Running the command:

``./q05.sh E 35``

Should produce output that looks something like the following:

::

  (TXT) Exam score = 35 count = 45 
  (SQL) Exam score = 35 count = 45

An example of all students getting a 5 from homework would look like this:

::

  chen_user@vma50:~/class/h05/q05$ ./q05.sh H 5
  (TXT) Homework score = 5 count = 940 
  (SQL) Homework score = 5 count = 940 
  chen_user@vma50:~/class/h05/q05$ 

- The word “Exam” should be replaced by “Homework” or “Quiz” as the flag changes.
- Running the command without one of the ``E``, ``H``, or ``Q`` options should result in a one-line error message and then exit the script.

Note: Since we are using two positional parameters, the ``-z`` test will not work properly on ``$1`` since a user could supply a score without the assignment type flag and the string will still have a non-zero length. To check that the assignment type flag exists, it is suggested to use conditional statements (``if, elif, elif, else, fi``) to make sure the flag is one of the ``E``, ``H``, or ``Q`` characters. Your check script will halt if this is not done properly because you need to give that one line of error output and then exit for the check script to move on.


